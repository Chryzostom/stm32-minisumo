
minisumo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038cc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a78  08003a78  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a80  08003a80  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a80  08003a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000014  08003a9c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08003a9c  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0ba  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020bd  00000000  00000000  0002d0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  0002fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179c2  00000000  00000000  000308d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1e2  00000000  00000000  0004829a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009703d  00000000  00000000  0005647c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed4b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e8  00000000  00000000  000ed50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003a48 	.word	0x08003a48

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08003a48 	.word	0x08003a48

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d0:	4b0e      	ldr	r3, [pc, #56]	; (800050c <HAL_Init+0x40>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <HAL_Init+0x40>)
 80004d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004dc:	4b0b      	ldr	r3, [pc, #44]	; (800050c <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0a      	ldr	r2, [pc, #40]	; (800050c <HAL_Init+0x40>)
 80004e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a07      	ldr	r2, [pc, #28]	; (800050c <HAL_Init+0x40>)
 80004ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f4:	2003      	movs	r0, #3
 80004f6:	f000 fb8d 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 f808 	bl	8000510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000500:	f002 ff18 	bl	8003334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40023c00 	.word	0x40023c00

08000510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x54>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_InitTick+0x58>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000526:	fbb3 f3f1 	udiv	r3, r3, r1
 800052a:	fbb2 f3f3 	udiv	r3, r2, r3
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fba5 	bl	8000c7e <HAL_SYSTICK_Config>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800053a:	2301      	movs	r3, #1
 800053c:	e00e      	b.n	800055c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b0f      	cmp	r3, #15
 8000542:	d80a      	bhi.n	800055a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000544:	2200      	movs	r2, #0
 8000546:	6879      	ldr	r1, [r7, #4]
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	f000 fb6d 	bl	8000c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <HAL_InitTick+0x5c>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000556:	2300      	movs	r3, #0
 8000558:	e000      	b.n	800055c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
}
 800055c:	4618      	mov	r0, r3
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000010 	.word	0x20000010
 8000568:	20000004 	.word	0x20000004
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x20>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	461a      	mov	r2, r3
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_IncTick+0x24>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4413      	add	r3, r2
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <HAL_IncTick+0x24>)
 8000582:	6013      	str	r3, [r2, #0]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000004 	.word	0x20000004
 8000594:	20000040 	.word	0x20000040

08000598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  return uwTick;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <HAL_GetTick+0x14>)
 800059e:	681b      	ldr	r3, [r3, #0]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000040 	.word	0x20000040

080005b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d101      	bne.n	80005c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e033      	b.n	800062e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d109      	bne.n	80005e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f002 fa2c 	bl	8002a2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e6:	f003 0310 	and.w	r3, r3, #16
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d118      	bne.n	8000620 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005f6:	f023 0302 	bic.w	r3, r3, #2
 80005fa:	f043 0202 	orr.w	r2, r3, #2
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f93a 	bl	800087c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	f023 0303 	bic.w	r3, r3, #3
 8000616:	f043 0201 	orr.w	r2, r3, #1
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	641a      	str	r2, [r3, #64]	; 0x40
 800061e:	e001      	b.n	8000624 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000620:	2301      	movs	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800062c:	7bfb      	ldrb	r3, [r7, #15]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800064c:	2b01      	cmp	r3, #1
 800064e:	d101      	bne.n	8000654 <HAL_ADC_ConfigChannel+0x1c>
 8000650:	2302      	movs	r3, #2
 8000652:	e105      	b.n	8000860 <HAL_ADC_ConfigChannel+0x228>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2201      	movs	r2, #1
 8000658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b09      	cmp	r3, #9
 8000662:	d925      	bls.n	80006b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	68d9      	ldr	r1, [r3, #12]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	b29b      	uxth	r3, r3
 8000670:	461a      	mov	r2, r3
 8000672:	4613      	mov	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4413      	add	r3, r2
 8000678:	3b1e      	subs	r3, #30
 800067a:	2207      	movs	r2, #7
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	43da      	mvns	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	400a      	ands	r2, r1
 8000688:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68d9      	ldr	r1, [r3, #12]
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	689a      	ldr	r2, [r3, #8]
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	b29b      	uxth	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	4603      	mov	r3, r0
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4403      	add	r3, r0
 80006a2:	3b1e      	subs	r3, #30
 80006a4:	409a      	lsls	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	430a      	orrs	r2, r1
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	e022      	b.n	80006f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	6919      	ldr	r1, [r3, #16]
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	461a      	mov	r2, r3
 80006be:	4613      	mov	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	4413      	add	r3, r2
 80006c4:	2207      	movs	r2, #7
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	43da      	mvns	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	400a      	ands	r2, r1
 80006d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6919      	ldr	r1, [r3, #16]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	689a      	ldr	r2, [r3, #8]
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	4603      	mov	r3, r0
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4403      	add	r3, r0
 80006ec:	409a      	lsls	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	430a      	orrs	r2, r1
 80006f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d824      	bhi.n	8000748 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	685a      	ldr	r2, [r3, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	3b05      	subs	r3, #5
 8000710:	221f      	movs	r2, #31
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	43da      	mvns	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	400a      	ands	r2, r1
 800071e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	b29b      	uxth	r3, r3
 800072c:	4618      	mov	r0, r3
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	685a      	ldr	r2, [r3, #4]
 8000732:	4613      	mov	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	3b05      	subs	r3, #5
 800073a:	fa00 f203 	lsl.w	r2, r0, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	430a      	orrs	r2, r1
 8000744:	635a      	str	r2, [r3, #52]	; 0x34
 8000746:	e04c      	b.n	80007e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	2b0c      	cmp	r3, #12
 800074e:	d824      	bhi.n	800079a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	3b23      	subs	r3, #35	; 0x23
 8000762:	221f      	movs	r2, #31
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	43da      	mvns	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	400a      	ands	r2, r1
 8000770:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	b29b      	uxth	r3, r3
 800077e:	4618      	mov	r0, r3
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685a      	ldr	r2, [r3, #4]
 8000784:	4613      	mov	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	3b23      	subs	r3, #35	; 0x23
 800078c:	fa00 f203 	lsl.w	r2, r0, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	430a      	orrs	r2, r1
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
 8000798:	e023      	b.n	80007e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	4613      	mov	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	3b41      	subs	r3, #65	; 0x41
 80007ac:	221f      	movs	r2, #31
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	43da      	mvns	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	400a      	ands	r2, r1
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685a      	ldr	r2, [r3, #4]
 80007ce:	4613      	mov	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4413      	add	r3, r2
 80007d4:	3b41      	subs	r3, #65	; 0x41
 80007d6:	fa00 f203 	lsl.w	r2, r0, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	430a      	orrs	r2, r1
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007e2:	4b22      	ldr	r3, [pc, #136]	; (800086c <HAL_ADC_ConfigChannel+0x234>)
 80007e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a21      	ldr	r2, [pc, #132]	; (8000870 <HAL_ADC_ConfigChannel+0x238>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d109      	bne.n	8000804 <HAL_ADC_ConfigChannel+0x1cc>
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b12      	cmp	r3, #18
 80007f6:	d105      	bne.n	8000804 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <HAL_ADC_ConfigChannel+0x238>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d123      	bne.n	8000856 <HAL_ADC_ConfigChannel+0x21e>
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b10      	cmp	r3, #16
 8000814:	d003      	beq.n	800081e <HAL_ADC_ConfigChannel+0x1e6>
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b11      	cmp	r3, #17
 800081c:	d11b      	bne.n	8000856 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b10      	cmp	r3, #16
 8000830:	d111      	bne.n	8000856 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_ADC_ConfigChannel+0x23c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a10      	ldr	r2, [pc, #64]	; (8000878 <HAL_ADC_ConfigChannel+0x240>)
 8000838:	fba2 2303 	umull	r2, r3, r2, r3
 800083c:	0c9a      	lsrs	r2, r3, #18
 800083e:	4613      	mov	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000848:	e002      	b.n	8000850 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	3b01      	subs	r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1f9      	bne.n	800084a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	40012300 	.word	0x40012300
 8000870:	40012000 	.word	0x40012000
 8000874:	20000010 	.word	0x20000010
 8000878:	431bde83 	.word	0x431bde83

0800087c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000884:	4b79      	ldr	r3, [pc, #484]	; (8000a6c <ADC_Init+0x1f0>)
 8000886:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	685a      	ldr	r2, [r3, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	431a      	orrs	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	685a      	ldr	r2, [r3, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	6859      	ldr	r1, [r3, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	691b      	ldr	r3, [r3, #16]
 80008bc:	021a      	lsls	r2, r3, #8
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	685a      	ldr	r2, [r3, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80008d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6859      	ldr	r1, [r3, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	430a      	orrs	r2, r1
 80008e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80008f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	6899      	ldr	r1, [r3, #8]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	68da      	ldr	r2, [r3, #12]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	430a      	orrs	r2, r1
 8000908:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090e:	4a58      	ldr	r2, [pc, #352]	; (8000a70 <ADC_Init+0x1f4>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d022      	beq.n	800095a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000922:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6899      	ldr	r1, [r3, #8]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	430a      	orrs	r2, r1
 8000934:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000944:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	6899      	ldr	r1, [r3, #8]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	430a      	orrs	r2, r1
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	e00f      	b.n	800097a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	689a      	ldr	r2, [r3, #8]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000978:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f022 0202 	bic.w	r2, r2, #2
 8000988:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	6899      	ldr	r1, [r3, #8]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7e1b      	ldrb	r3, [r3, #24]
 8000994:	005a      	lsls	r2, r3, #1
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	430a      	orrs	r2, r1
 800099c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d01b      	beq.n	80009e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80009c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6859      	ldr	r1, [r3, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d2:	3b01      	subs	r3, #1
 80009d4:	035a      	lsls	r2, r3, #13
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	430a      	orrs	r2, r1
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	e007      	b.n	80009f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	051a      	lsls	r2, r3, #20
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	430a      	orrs	r2, r1
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	689a      	ldr	r2, [r3, #8]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	6899      	ldr	r1, [r3, #8]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a32:	025a      	lsls	r2, r3, #9
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6899      	ldr	r1, [r3, #8]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	029a      	lsls	r2, r3, #10
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	609a      	str	r2, [r3, #8]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	40012300 	.word	0x40012300
 8000a70:	0f000001 	.word	0x0f000001

08000a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	60d3      	str	r3, [r2, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 0307 	and.w	r3, r3, #7
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	db0b      	blt.n	8000b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f003 021f 	and.w	r2, r3, #31
 8000af0:	4907      	ldr	r1, [pc, #28]	; (8000b10 <__NVIC_EnableIRQ+0x38>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	095b      	lsrs	r3, r3, #5
 8000af8:	2001      	movs	r0, #1
 8000afa:	fa00 f202 	lsl.w	r2, r0, r2
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	; (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	; 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be0:	d301      	bcc.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00f      	b.n	8000c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <SysTick_Config+0x40>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	210f      	movs	r1, #15
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f7ff ff8e 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <SysTick_Config+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <SysTick_Config+0x40>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff29 	bl	8000a74 <__NVIC_SetPriorityGrouping>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3c:	f7ff ff3e 	bl	8000abc <__NVIC_GetPriorityGrouping>
 8000c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f7ff ff8e 	bl	8000b68 <NVIC_EncodePriority>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff5d 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff31 	bl	8000ad8 <__NVIC_EnableIRQ>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffa2 	bl	8000bd0 <SysTick_Config>
 8000c8c:	4603      	mov	r3, r0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff fc78 	bl	8000598 <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d101      	bne.n	8000cb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e099      	b.n	8000de8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f022 0201 	bic.w	r2, r2, #1
 8000cd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cd4:	e00f      	b.n	8000cf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cd6:	f7ff fc5f 	bl	8000598 <HAL_GetTick>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	2b05      	cmp	r3, #5
 8000ce2:	d908      	bls.n	8000cf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2203      	movs	r2, #3
 8000cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e078      	b.n	8000de8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1e8      	bne.n	8000cd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	4b38      	ldr	r3, [pc, #224]	; (8000df0 <HAL_DMA_Init+0x158>)
 8000d10:	4013      	ands	r3, r2
 8000d12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d107      	bne.n	8000d60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	f023 0307 	bic.w	r3, r3, #7
 8000d76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	d117      	bne.n	8000dba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00e      	beq.n	8000dba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 f9e9 	bl	8001174 <DMA_CheckFifoParam>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d008      	beq.n	8000dba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2240      	movs	r2, #64	; 0x40
 8000dac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2201      	movs	r2, #1
 8000db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000db6:	2301      	movs	r3, #1
 8000db8:	e016      	b.n	8000de8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f9a0 	bl	8001108 <DMA_CalcBaseAndBitshift>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dd0:	223f      	movs	r2, #63	; 0x3f
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	f010803f 	.word	0xf010803f

08000df4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e00:	4b92      	ldr	r3, [pc, #584]	; (800104c <HAL_DMA_IRQHandler+0x258>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a92      	ldr	r2, [pc, #584]	; (8001050 <HAL_DMA_IRQHandler+0x25c>)
 8000e06:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0a:	0a9b      	lsrs	r3, r3, #10
 8000e0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e1e:	2208      	movs	r2, #8
 8000e20:	409a      	lsls	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d01a      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d013      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0204 	bic.w	r2, r2, #4
 8000e46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e4c:	2208      	movs	r2, #8
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e58:	f043 0201 	orr.w	r2, r3, #1
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e64:	2201      	movs	r2, #1
 8000e66:	409a      	lsls	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d012      	beq.n	8000e96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00b      	beq.n	8000e96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e82:	2201      	movs	r2, #1
 8000e84:	409a      	lsls	r2, r3
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e8e:	f043 0202 	orr.w	r2, r3, #2
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	409a      	lsls	r2, r3
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d012      	beq.n	8000ecc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d00b      	beq.n	8000ecc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb8:	2204      	movs	r2, #4
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec4:	f043 0204 	orr.w	r2, r3, #4
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed0:	2210      	movs	r2, #16
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d043      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d03c      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eee:	2210      	movs	r2, #16
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d018      	beq.n	8000f36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d108      	bne.n	8000f24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d024      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	4798      	blx	r3
 8000f22:	e01f      	b.n	8000f64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d01b      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	4798      	blx	r3
 8000f34:	e016      	b.n	8000f64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d107      	bne.n	8000f54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0208 	bic.w	r2, r2, #8
 8000f52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f68:	2220      	movs	r2, #32
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 808e 	beq.w	8001092 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0310 	and.w	r3, r3, #16
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 8086 	beq.w	8001092 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d136      	bne.n	800100c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0216 	bic.w	r2, r2, #22
 8000fac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	695a      	ldr	r2, [r3, #20]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d103      	bne.n	8000fce <HAL_DMA_IRQHandler+0x1da>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d007      	beq.n	8000fde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 0208 	bic.w	r2, r2, #8
 8000fdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe2:	223f      	movs	r2, #63	; 0x3f
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d07d      	beq.n	80010fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	4798      	blx	r3
        }
        return;
 800100a:	e078      	b.n	80010fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d01c      	beq.n	8001054 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d108      	bne.n	800103a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	2b00      	cmp	r3, #0
 800102e:	d030      	beq.n	8001092 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	4798      	blx	r3
 8001038:	e02b      	b.n	8001092 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103e:	2b00      	cmp	r3, #0
 8001040:	d027      	beq.n	8001092 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	4798      	blx	r3
 800104a:	e022      	b.n	8001092 <HAL_DMA_IRQHandler+0x29e>
 800104c:	20000010 	.word	0x20000010
 8001050:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10f      	bne.n	8001082 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0210 	bic.w	r2, r2, #16
 8001070:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001096:	2b00      	cmp	r3, #0
 8001098:	d032      	beq.n	8001100 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d022      	beq.n	80010ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2205      	movs	r2, #5
 80010aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0201 	bic.w	r2, r2, #1
 80010bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3301      	adds	r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d307      	bcc.n	80010da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f2      	bne.n	80010be <HAL_DMA_IRQHandler+0x2ca>
 80010d8:	e000      	b.n	80010dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80010da:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d005      	beq.n	8001100 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	4798      	blx	r3
 80010fc:	e000      	b.n	8001100 <HAL_DMA_IRQHandler+0x30c>
        return;
 80010fe:	bf00      	nop
    }
  }
}
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop

08001108 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	3b10      	subs	r3, #16
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <DMA_CalcBaseAndBitshift+0x64>)
 800111a:	fba2 2303 	umull	r2, r3, r2, r3
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001122:	4a13      	ldr	r2, [pc, #76]	; (8001170 <DMA_CalcBaseAndBitshift+0x68>)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d909      	bls.n	800114a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800113e:	f023 0303 	bic.w	r3, r3, #3
 8001142:	1d1a      	adds	r2, r3, #4
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	659a      	str	r2, [r3, #88]	; 0x58
 8001148:	e007      	b.n	800115a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001152:	f023 0303 	bic.w	r3, r3, #3
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	aaaaaaab 	.word	0xaaaaaaab
 8001170:	08003a60 	.word	0x08003a60

08001174 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001184:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d11f      	bne.n	80011ce <DMA_CheckFifoParam+0x5a>
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b03      	cmp	r3, #3
 8001192:	d856      	bhi.n	8001242 <DMA_CheckFifoParam+0xce>
 8001194:	a201      	add	r2, pc, #4	; (adr r2, 800119c <DMA_CheckFifoParam+0x28>)
 8001196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119a:	bf00      	nop
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011bf 	.word	0x080011bf
 80011a4:	080011ad 	.word	0x080011ad
 80011a8:	08001243 	.word	0x08001243
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d046      	beq.n	8001246 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80011bc:	e043      	b.n	8001246 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80011c6:	d140      	bne.n	800124a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80011cc:	e03d      	b.n	800124a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011d6:	d121      	bne.n	800121c <DMA_CheckFifoParam+0xa8>
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d837      	bhi.n	800124e <DMA_CheckFifoParam+0xda>
 80011de:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <DMA_CheckFifoParam+0x70>)
 80011e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e4:	080011f5 	.word	0x080011f5
 80011e8:	080011fb 	.word	0x080011fb
 80011ec:	080011f5 	.word	0x080011f5
 80011f0:	0800120d 	.word	0x0800120d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
      break;
 80011f8:	e030      	b.n	800125c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d025      	beq.n	8001252 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800120a:	e022      	b.n	8001252 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001210:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001214:	d11f      	bne.n	8001256 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800121a:	e01c      	b.n	8001256 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d903      	bls.n	800122a <DMA_CheckFifoParam+0xb6>
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	2b03      	cmp	r3, #3
 8001226:	d003      	beq.n	8001230 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001228:	e018      	b.n	800125c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	73fb      	strb	r3, [r7, #15]
      break;
 800122e:	e015      	b.n	800125c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00e      	beq.n	800125a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
      break;
 8001240:	e00b      	b.n	800125a <DMA_CheckFifoParam+0xe6>
      break;
 8001242:	bf00      	nop
 8001244:	e00a      	b.n	800125c <DMA_CheckFifoParam+0xe8>
      break;
 8001246:	bf00      	nop
 8001248:	e008      	b.n	800125c <DMA_CheckFifoParam+0xe8>
      break;
 800124a:	bf00      	nop
 800124c:	e006      	b.n	800125c <DMA_CheckFifoParam+0xe8>
      break;
 800124e:	bf00      	nop
 8001250:	e004      	b.n	800125c <DMA_CheckFifoParam+0xe8>
      break;
 8001252:	bf00      	nop
 8001254:	e002      	b.n	800125c <DMA_CheckFifoParam+0xe8>
      break;   
 8001256:	bf00      	nop
 8001258:	e000      	b.n	800125c <DMA_CheckFifoParam+0xe8>
      break;
 800125a:	bf00      	nop
    }
  } 
  
  return status; 
 800125c:	7bfb      	ldrb	r3, [r7, #15]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e159      	b.n	800153c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 8148 	bne.w	8001536 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d005      	beq.n	80012be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d130      	bne.n	8001320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b03      	cmp	r3, #3
 800132a:	d017      	beq.n	800135c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d123      	bne.n	80013b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	08da      	lsrs	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3208      	adds	r2, #8
 80013aa:	69b9      	ldr	r1, [r7, #24]
 80013ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0203 	and.w	r2, r3, #3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a2 	beq.w	8001536 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b57      	ldr	r3, [pc, #348]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a56      	ldr	r2, [pc, #344]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b54      	ldr	r3, [pc, #336]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140e:	4a52      	ldr	r2, [pc, #328]	; (8001558 <HAL_GPIO_Init+0x2ec>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a49      	ldr	r2, [pc, #292]	; (800155c <HAL_GPIO_Init+0x2f0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x202>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a48      	ldr	r2, [pc, #288]	; (8001560 <HAL_GPIO_Init+0x2f4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x1fe>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a47      	ldr	r2, [pc, #284]	; (8001564 <HAL_GPIO_Init+0x2f8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x1fa>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a46      	ldr	r2, [pc, #280]	; (8001568 <HAL_GPIO_Init+0x2fc>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x1f6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a45      	ldr	r2, [pc, #276]	; (800156c <HAL_GPIO_Init+0x300>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x1f2>
 800145a:	2304      	movs	r3, #4
 800145c:	e008      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800145e:	2307      	movs	r3, #7
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x204>
 8001462:	2303      	movs	r3, #3
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x204>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800146e:	2300      	movs	r3, #0
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001480:	4935      	ldr	r1, [pc, #212]	; (8001558 <HAL_GPIO_Init+0x2ec>)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148e:	4b38      	ldr	r3, [pc, #224]	; (8001570 <HAL_GPIO_Init+0x304>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b2:	4a2f      	ldr	r2, [pc, #188]	; (8001570 <HAL_GPIO_Init+0x304>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_GPIO_Init+0x304>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014dc:	4a24      	ldr	r2, [pc, #144]	; (8001570 <HAL_GPIO_Init+0x304>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <HAL_GPIO_Init+0x304>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001506:	4a1a      	ldr	r2, [pc, #104]	; (8001570 <HAL_GPIO_Init+0x304>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_GPIO_Init+0x304>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001530:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <HAL_GPIO_Init+0x304>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3301      	adds	r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	f67f aea2 	bls.w	8001288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40013800 	.word	0x40013800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40021000 	.word	0x40021000
 8001570:	40013c00 	.word	0x40013c00

08001574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	887b      	ldrh	r3, [r7, #2]
 8001586:	4013      	ands	r3, r2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	e001      	b.n	8001596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001596:	7bfb      	ldrb	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c0:	e003      	b.n	80015ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	041a      	lsls	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	619a      	str	r2, [r3, #24]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e264      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d075      	beq.n	80016e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015f6:	4ba3      	ldr	r3, [pc, #652]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d00c      	beq.n	800161c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001602:	4ba0      	ldr	r3, [pc, #640]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800160a:	2b08      	cmp	r3, #8
 800160c:	d112      	bne.n	8001634 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160e:	4b9d      	ldr	r3, [pc, #628]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800161a:	d10b      	bne.n	8001634 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	4b99      	ldr	r3, [pc, #612]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d05b      	beq.n	80016e0 <HAL_RCC_OscConfig+0x108>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d157      	bne.n	80016e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e23f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163c:	d106      	bne.n	800164c <HAL_RCC_OscConfig+0x74>
 800163e:	4b91      	ldr	r3, [pc, #580]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a90      	ldr	r2, [pc, #576]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e01d      	b.n	8001688 <HAL_RCC_OscConfig+0xb0>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x98>
 8001656:	4b8b      	ldr	r3, [pc, #556]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a8a      	ldr	r2, [pc, #552]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800165c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b88      	ldr	r3, [pc, #544]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a87      	ldr	r2, [pc, #540]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e00b      	b.n	8001688 <HAL_RCC_OscConfig+0xb0>
 8001670:	4b84      	ldr	r3, [pc, #528]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a83      	ldr	r2, [pc, #524]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b81      	ldr	r3, [pc, #516]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a80      	ldr	r2, [pc, #512]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7fe ff82 	bl	8000598 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001698:	f7fe ff7e 	bl	8000598 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e204      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	4b76      	ldr	r3, [pc, #472]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0xc0>
 80016b6:	e014      	b.n	80016e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7fe ff6e 	bl	8000598 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c0:	f7fe ff6a 	bl	8000598 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e1f0      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	4b6c      	ldr	r3, [pc, #432]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0xe8>
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d063      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ee:	4b65      	ldr	r3, [pc, #404]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00b      	beq.n	8001712 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fa:	4b62      	ldr	r3, [pc, #392]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001702:	2b08      	cmp	r3, #8
 8001704:	d11c      	bne.n	8001740 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001706:	4b5f      	ldr	r3, [pc, #380]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d116      	bne.n	8001740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	4b5c      	ldr	r3, [pc, #368]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_RCC_OscConfig+0x152>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e1c4      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b56      	ldr	r3, [pc, #344]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4952      	ldr	r1, [pc, #328]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	e03a      	b.n	80017b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d020      	beq.n	800178a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001748:	4b4f      	ldr	r3, [pc, #316]	; (8001888 <HAL_RCC_OscConfig+0x2b0>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7fe ff23 	bl	8000598 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001756:	f7fe ff1f 	bl	8000598 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1a5      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	4b46      	ldr	r3, [pc, #280]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001774:	4b43      	ldr	r3, [pc, #268]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4940      	ldr	r1, [pc, #256]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178a:	4b3f      	ldr	r3, [pc, #252]	; (8001888 <HAL_RCC_OscConfig+0x2b0>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7fe ff02 	bl	8000598 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001798:	f7fe fefe 	bl	8000598 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e184      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	4b36      	ldr	r3, [pc, #216]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d030      	beq.n	8001824 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d016      	beq.n	80017f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ca:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_RCC_OscConfig+0x2b4>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7fe fee2 	bl	8000598 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d8:	f7fe fede 	bl	8000598 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e164      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	4b26      	ldr	r3, [pc, #152]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x200>
 80017f6:	e015      	b.n	8001824 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <HAL_RCC_OscConfig+0x2b4>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fe:	f7fe fecb 	bl	8000598 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001806:	f7fe fec7 	bl	8000598 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e14d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800181a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80a0 	beq.w	8001972 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001836:	4b13      	ldr	r3, [pc, #76]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10f      	bne.n	8001862 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_RCC_OscConfig+0x2b8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d121      	bne.n	80018b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_RCC_OscConfig+0x2b8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_RCC_OscConfig+0x2b8>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187a:	f7fe fe8d 	bl	8000598 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	e011      	b.n	80018a6 <HAL_RCC_OscConfig+0x2ce>
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	42470000 	.word	0x42470000
 800188c:	42470e80 	.word	0x42470e80
 8001890:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001894:	f7fe fe80 	bl	8000598 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e106      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	4b85      	ldr	r3, [pc, #532]	; (8001abc <HAL_RCC_OscConfig+0x4e4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d106      	bne.n	80018c8 <HAL_RCC_OscConfig+0x2f0>
 80018ba:	4b81      	ldr	r3, [pc, #516]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a80      	ldr	r2, [pc, #512]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
 80018c6:	e01c      	b.n	8001902 <HAL_RCC_OscConfig+0x32a>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d10c      	bne.n	80018ea <HAL_RCC_OscConfig+0x312>
 80018d0:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	4a7a      	ldr	r2, [pc, #488]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6713      	str	r3, [r2, #112]	; 0x70
 80018dc:	4b78      	ldr	r3, [pc, #480]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	4a77      	ldr	r2, [pc, #476]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6713      	str	r3, [r2, #112]	; 0x70
 80018e8:	e00b      	b.n	8001902 <HAL_RCC_OscConfig+0x32a>
 80018ea:	4b75      	ldr	r3, [pc, #468]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	4a74      	ldr	r2, [pc, #464]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	6713      	str	r3, [r2, #112]	; 0x70
 80018f6:	4b72      	ldr	r3, [pc, #456]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	4a71      	ldr	r2, [pc, #452]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018fc:	f023 0304 	bic.w	r3, r3, #4
 8001900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d015      	beq.n	8001936 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190a:	f7fe fe45 	bl	8000598 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7fe fe41 	bl	8000598 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e0c5      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001928:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ee      	beq.n	8001912 <HAL_RCC_OscConfig+0x33a>
 8001934:	e014      	b.n	8001960 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001936:	f7fe fe2f 	bl	8000598 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193e:	f7fe fe2b 	bl	8000598 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f241 3288 	movw	r2, #5000	; 0x1388
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e0af      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001954:	4b5a      	ldr	r3, [pc, #360]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 8001956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1ee      	bne.n	800193e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d105      	bne.n	8001972 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001966:	4b56      	ldr	r3, [pc, #344]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a55      	ldr	r2, [pc, #340]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 800196c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 809b 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800197c:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d05c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d141      	bne.n	8001a14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001990:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <HAL_RCC_OscConfig+0x4ec>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7fe fdff 	bl	8000598 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199e:	f7fe fdfb 	bl	8000598 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e081      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b0:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69da      	ldr	r2, [r3, #28]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	019b      	lsls	r3, r3, #6
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	085b      	lsrs	r3, r3, #1
 80019d4:	3b01      	subs	r3, #1
 80019d6:	041b      	lsls	r3, r3, #16
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	061b      	lsls	r3, r3, #24
 80019e0:	4937      	ldr	r1, [pc, #220]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <HAL_RCC_OscConfig+0x4ec>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7fe fdd4 	bl	8000598 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7fe fdd0 	bl	8000598 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e056      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a06:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x41c>
 8001a12:	e04e      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_RCC_OscConfig+0x4ec>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7fe fdbd 	bl	8000598 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a22:	f7fe fdb9 	bl	8000598 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e03f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x44a>
 8001a40:	e037      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e032      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d028      	beq.n	8001aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d121      	bne.n	8001aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d11a      	bne.n	8001aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a7e:	4013      	ands	r3, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a84:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d111      	bne.n	8001aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	085b      	lsrs	r3, r3, #1
 8001a96:	3b01      	subs	r3, #1
 8001a98:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40007000 	.word	0x40007000
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	42470060 	.word	0x42470060

08001ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0cc      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b68      	ldr	r3, [pc, #416]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d90c      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b65      	ldr	r3, [pc, #404]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b63      	ldr	r3, [pc, #396]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b8      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b1c:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a58      	ldr	r2, [pc, #352]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a52      	ldr	r2, [pc, #328]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	494d      	ldr	r1, [pc, #308]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d044      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d119      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d003      	beq.n	8001b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e06f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e067      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba6:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f023 0203 	bic.w	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4934      	ldr	r1, [pc, #208]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb8:	f7fe fcee 	bl	8000598 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7fe fcea 	bl	8000598 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e04f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 020c 	and.w	r2, r3, #12
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d1eb      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001be8:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d20c      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e032      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4916      	ldr	r1, [pc, #88]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	490e      	ldr	r1, [pc, #56]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c4e:	f000 f821 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	490a      	ldr	r1, [pc, #40]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fc4e 	bl	8000510 <HAL_InitTick>

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023c00 	.word	0x40023c00
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08003a68 	.word	0x08003a68
 8001c8c:	20000010 	.word	0x20000010
 8001c90:	20000000 	.word	0x20000000

08001c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	b5b0      	push	{r4, r5, r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	6079      	str	r1, [r7, #4]
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	60f9      	str	r1, [r7, #12]
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001caa:	4952      	ldr	r1, [pc, #328]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cac:	6889      	ldr	r1, [r1, #8]
 8001cae:	f001 010c 	and.w	r1, r1, #12
 8001cb2:	2908      	cmp	r1, #8
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x3e>
 8001cb6:	2908      	cmp	r1, #8
 8001cb8:	f200 8094 	bhi.w	8001de4 <HAL_RCC_GetSysClockFreq+0x150>
 8001cbc:	2900      	cmp	r1, #0
 8001cbe:	d002      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x32>
 8001cc0:	2904      	cmp	r1, #4
 8001cc2:	d003      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x38>
 8001cc4:	e08e      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc6:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001cc8:	60bb      	str	r3, [r7, #8]
       break;
 8001cca:	e08e      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ccc:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x168>)
 8001cce:	60bb      	str	r3, [r7, #8]
      break;
 8001cd0:	e08b      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd2:	4948      	ldr	r1, [pc, #288]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cd4:	6849      	ldr	r1, [r1, #4]
 8001cd6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001cda:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cdc:	4945      	ldr	r1, [pc, #276]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cde:	6849      	ldr	r1, [r1, #4]
 8001ce0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001ce4:	2900      	cmp	r1, #0
 8001ce6:	d024      	beq.n	8001d32 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce8:	4942      	ldr	r1, [pc, #264]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cea:	6849      	ldr	r1, [r1, #4]
 8001cec:	0989      	lsrs	r1, r1, #6
 8001cee:	4608      	mov	r0, r1
 8001cf0:	f04f 0100 	mov.w	r1, #0
 8001cf4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001cf8:	f04f 0500 	mov.w	r5, #0
 8001cfc:	ea00 0204 	and.w	r2, r0, r4
 8001d00:	ea01 0305 	and.w	r3, r1, r5
 8001d04:	493d      	ldr	r1, [pc, #244]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x168>)
 8001d06:	fb01 f003 	mul.w	r0, r1, r3
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	fb01 f102 	mul.w	r1, r1, r2
 8001d10:	1844      	adds	r4, r0, r1
 8001d12:	493a      	ldr	r1, [pc, #232]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x168>)
 8001d14:	fba2 0101 	umull	r0, r1, r2, r1
 8001d18:	1863      	adds	r3, r4, r1
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	f7fe fa56 	bl	80001d4 <__aeabi_uldivmod>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	e04a      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d32:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	099b      	lsrs	r3, r3, #6
 8001d38:	461a      	mov	r2, r3
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d42:	f04f 0100 	mov.w	r1, #0
 8001d46:	ea02 0400 	and.w	r4, r2, r0
 8001d4a:	ea03 0501 	and.w	r5, r3, r1
 8001d4e:	4620      	mov	r0, r4
 8001d50:	4629      	mov	r1, r5
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	014b      	lsls	r3, r1, #5
 8001d5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d60:	0142      	lsls	r2, r0, #5
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	1b00      	subs	r0, r0, r4
 8001d68:	eb61 0105 	sbc.w	r1, r1, r5
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	018b      	lsls	r3, r1, #6
 8001d76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d7a:	0182      	lsls	r2, r0, #6
 8001d7c:	1a12      	subs	r2, r2, r0
 8001d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d82:	f04f 0000 	mov.w	r0, #0
 8001d86:	f04f 0100 	mov.w	r1, #0
 8001d8a:	00d9      	lsls	r1, r3, #3
 8001d8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d90:	00d0      	lsls	r0, r2, #3
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	1912      	adds	r2, r2, r4
 8001d98:	eb45 0303 	adc.w	r3, r5, r3
 8001d9c:	f04f 0000 	mov.w	r0, #0
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	0299      	lsls	r1, r3, #10
 8001da6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001daa:	0290      	lsls	r0, r2, #10
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	461a      	mov	r2, r3
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	f7fe fa0a 	bl	80001d4 <__aeabi_uldivmod>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	60bb      	str	r3, [r7, #8]
      break;
 8001de2:	e002      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001de6:	60bb      	str	r3, [r7, #8]
      break;
 8001de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dea:	68bb      	ldr	r3, [r7, #8]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bdb0      	pop	{r4, r5, r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	00f42400 	.word	0x00f42400
 8001dfc:	017d7840 	.word	0x017d7840

08001e00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e041      	b.n	8001e96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f001 fd5c 	bl	80038e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f000 faf4 	bl	800242c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <HAL_TIM_PWM_Start+0x24>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	bf14      	ite	ne
 8001ebc:	2301      	movne	r3, #1
 8001ebe:	2300      	moveq	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e022      	b.n	8001f0a <HAL_TIM_PWM_Start+0x6a>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d109      	bne.n	8001ede <HAL_TIM_PWM_Start+0x3e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	bf14      	ite	ne
 8001ed6:	2301      	movne	r3, #1
 8001ed8:	2300      	moveq	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	e015      	b.n	8001f0a <HAL_TIM_PWM_Start+0x6a>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d109      	bne.n	8001ef8 <HAL_TIM_PWM_Start+0x58>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	bf14      	ite	ne
 8001ef0:	2301      	movne	r3, #1
 8001ef2:	2300      	moveq	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	e008      	b.n	8001f0a <HAL_TIM_PWM_Start+0x6a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	bf14      	ite	ne
 8001f04:	2301      	movne	r3, #1
 8001f06:	2300      	moveq	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e068      	b.n	8001fe4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d104      	bne.n	8001f22 <HAL_TIM_PWM_Start+0x82>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f20:	e013      	b.n	8001f4a <HAL_TIM_PWM_Start+0xaa>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d104      	bne.n	8001f32 <HAL_TIM_PWM_Start+0x92>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f30:	e00b      	b.n	8001f4a <HAL_TIM_PWM_Start+0xaa>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d104      	bne.n	8001f42 <HAL_TIM_PWM_Start+0xa2>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f40:	e003      	b.n	8001f4a <HAL_TIM_PWM_Start+0xaa>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2202      	movs	r2, #2
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	6839      	ldr	r1, [r7, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fc76 	bl	8002844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_TIM_PWM_Start+0x14c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d107      	bne.n	8001f72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <HAL_TIM_PWM_Start+0x14c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d018      	beq.n	8001fae <HAL_TIM_PWM_Start+0x10e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f84:	d013      	beq.n	8001fae <HAL_TIM_PWM_Start+0x10e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <HAL_TIM_PWM_Start+0x150>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00e      	beq.n	8001fae <HAL_TIM_PWM_Start+0x10e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <HAL_TIM_PWM_Start+0x154>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d009      	beq.n	8001fae <HAL_TIM_PWM_Start+0x10e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <HAL_TIM_PWM_Start+0x158>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d004      	beq.n	8001fae <HAL_TIM_PWM_Start+0x10e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <HAL_TIM_PWM_Start+0x15c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d111      	bne.n	8001fd2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b06      	cmp	r3, #6
 8001fbe:	d010      	beq.n	8001fe2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd0:	e007      	b.n	8001fe2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0201 	orr.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40000800 	.word	0x40000800
 8001ff8:	40000c00 	.word	0x40000c00
 8001ffc:	40014000 	.word	0x40014000

08002000 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e097      	b.n	8002144 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d106      	bne.n	800202e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f001 fbe1 	bl	80037f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2202      	movs	r2, #2
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002044:	f023 0307 	bic.w	r3, r3, #7
 8002048:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3304      	adds	r3, #4
 8002052:	4619      	mov	r1, r3
 8002054:	4610      	mov	r0, r2
 8002056:	f000 f9e9 	bl	800242c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002082:	f023 0303 	bic.w	r3, r3, #3
 8002086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	4313      	orrs	r3, r2
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80020a0:	f023 030c 	bic.w	r3, r3, #12
 80020a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	4313      	orrs	r3, r2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	011a      	lsls	r2, r3, #4
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	031b      	lsls	r3, r3, #12
 80020d0:	4313      	orrs	r3, r2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80020de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80020e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	4313      	orrs	r3, r2
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800215c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002164:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800216c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002174:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d110      	bne.n	800219e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d102      	bne.n	8002188 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002182:	7b7b      	ldrb	r3, [r7, #13]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d001      	beq.n	800218c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e089      	b.n	80022a0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800219c:	e031      	b.n	8002202 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d110      	bne.n	80021c6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80021a4:	7bbb      	ldrb	r3, [r7, #14]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d102      	bne.n	80021b0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80021aa:	7b3b      	ldrb	r3, [r7, #12]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d001      	beq.n	80021b4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e075      	b.n	80022a0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021c4:	e01d      	b.n	8002202 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d108      	bne.n	80021de <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80021cc:	7bbb      	ldrb	r3, [r7, #14]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d105      	bne.n	80021de <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80021d2:	7b7b      	ldrb	r3, [r7, #13]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d102      	bne.n	80021de <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80021d8:	7b3b      	ldrb	r3, [r7, #12]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d001      	beq.n	80021e2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e05e      	b.n	80022a0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2202      	movs	r2, #2
 80021e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2202      	movs	r2, #2
 80021ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2202      	movs	r2, #2
 80021f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b04      	cmp	r3, #4
 800220c:	d010      	beq.n	8002230 <HAL_TIM_Encoder_Start_IT+0xe4>
 800220e:	e01f      	b.n	8002250 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2201      	movs	r2, #1
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fb13 	bl	8002844 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0202 	orr.w	r2, r2, #2
 800222c:	60da      	str	r2, [r3, #12]
      break;
 800222e:	e02e      	b.n	800228e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2201      	movs	r2, #1
 8002236:	2104      	movs	r1, #4
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fb03 	bl	8002844 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0204 	orr.w	r2, r2, #4
 800224c:	60da      	str	r2, [r3, #12]
      break;
 800224e:	e01e      	b.n	800228e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2201      	movs	r2, #1
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f000 faf3 	bl	8002844 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2201      	movs	r2, #1
 8002264:	2104      	movs	r1, #4
 8002266:	4618      	mov	r0, r3
 8002268:	f000 faec 	bl	8002844 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0202 	orr.w	r2, r2, #2
 800227a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0204 	orr.w	r2, r2, #4
 800228a:	60da      	str	r2, [r3, #12]
      break;
 800228c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e0ae      	b.n	8002424 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	f200 809f 	bhi.w	8002414 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022d6:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	08002311 	.word	0x08002311
 80022e0:	08002415 	.word	0x08002415
 80022e4:	08002415 	.word	0x08002415
 80022e8:	08002415 	.word	0x08002415
 80022ec:	08002351 	.word	0x08002351
 80022f0:	08002415 	.word	0x08002415
 80022f4:	08002415 	.word	0x08002415
 80022f8:	08002415 	.word	0x08002415
 80022fc:	08002393 	.word	0x08002393
 8002300:	08002415 	.word	0x08002415
 8002304:	08002415 	.word	0x08002415
 8002308:	08002415 	.word	0x08002415
 800230c:	080023d3 	.word	0x080023d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f908 	bl	800252c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0208 	orr.w	r2, r2, #8
 800232a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0204 	bic.w	r2, r2, #4
 800233a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6999      	ldr	r1, [r3, #24]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	619a      	str	r2, [r3, #24]
      break;
 800234e:	e064      	b.n	800241a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f94e 	bl	80025f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800236a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6999      	ldr	r1, [r3, #24]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	021a      	lsls	r2, r3, #8
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	619a      	str	r2, [r3, #24]
      break;
 8002390:	e043      	b.n	800241a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 f999 	bl	80026d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0208 	orr.w	r2, r2, #8
 80023ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69da      	ldr	r2, [r3, #28]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0204 	bic.w	r2, r2, #4
 80023bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69d9      	ldr	r1, [r3, #28]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	61da      	str	r2, [r3, #28]
      break;
 80023d0:	e023      	b.n	800241a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f9e3 	bl	80027a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69da      	ldr	r2, [r3, #28]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69d9      	ldr	r1, [r3, #28]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	021a      	lsls	r2, r3, #8
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	61da      	str	r2, [r3, #28]
      break;
 8002412:	e002      	b.n	800241a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	75fb      	strb	r3, [r7, #23]
      break;
 8002418:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002422:	7dfb      	ldrb	r3, [r7, #23]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a34      	ldr	r2, [pc, #208]	; (8002510 <TIM_Base_SetConfig+0xe4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00f      	beq.n	8002464 <TIM_Base_SetConfig+0x38>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244a:	d00b      	beq.n	8002464 <TIM_Base_SetConfig+0x38>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a31      	ldr	r2, [pc, #196]	; (8002514 <TIM_Base_SetConfig+0xe8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d007      	beq.n	8002464 <TIM_Base_SetConfig+0x38>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a30      	ldr	r2, [pc, #192]	; (8002518 <TIM_Base_SetConfig+0xec>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d003      	beq.n	8002464 <TIM_Base_SetConfig+0x38>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a2f      	ldr	r2, [pc, #188]	; (800251c <TIM_Base_SetConfig+0xf0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d108      	bne.n	8002476 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a25      	ldr	r2, [pc, #148]	; (8002510 <TIM_Base_SetConfig+0xe4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d01b      	beq.n	80024b6 <TIM_Base_SetConfig+0x8a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002484:	d017      	beq.n	80024b6 <TIM_Base_SetConfig+0x8a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a22      	ldr	r2, [pc, #136]	; (8002514 <TIM_Base_SetConfig+0xe8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d013      	beq.n	80024b6 <TIM_Base_SetConfig+0x8a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a21      	ldr	r2, [pc, #132]	; (8002518 <TIM_Base_SetConfig+0xec>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00f      	beq.n	80024b6 <TIM_Base_SetConfig+0x8a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a20      	ldr	r2, [pc, #128]	; (800251c <TIM_Base_SetConfig+0xf0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00b      	beq.n	80024b6 <TIM_Base_SetConfig+0x8a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <TIM_Base_SetConfig+0xf4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <TIM_Base_SetConfig+0x8a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a1e      	ldr	r2, [pc, #120]	; (8002524 <TIM_Base_SetConfig+0xf8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d003      	beq.n	80024b6 <TIM_Base_SetConfig+0x8a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <TIM_Base_SetConfig+0xfc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d108      	bne.n	80024c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a08      	ldr	r2, [pc, #32]	; (8002510 <TIM_Base_SetConfig+0xe4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d103      	bne.n	80024fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	615a      	str	r2, [r3, #20]
}
 8002502:	bf00      	nop
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40010000 	.word	0x40010000
 8002514:	40000400 	.word	0x40000400
 8002518:	40000800 	.word	0x40000800
 800251c:	40000c00 	.word	0x40000c00
 8002520:	40014000 	.word	0x40014000
 8002524:	40014400 	.word	0x40014400
 8002528:	40014800 	.word	0x40014800

0800252c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	f023 0201 	bic.w	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0303 	bic.w	r3, r3, #3
 8002562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f023 0302 	bic.w	r3, r3, #2
 8002574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <TIM_OC1_SetConfig+0xc8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d10c      	bne.n	80025a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f023 0308 	bic.w	r3, r3, #8
 800258e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a13      	ldr	r2, [pc, #76]	; (80025f4 <TIM_OC1_SetConfig+0xc8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d111      	bne.n	80025ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	621a      	str	r2, [r3, #32]
}
 80025e8:	bf00      	nop
 80025ea:	371c      	adds	r7, #28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	40010000 	.word	0x40010000

080025f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	f023 0210 	bic.w	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800262e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f023 0320 	bic.w	r3, r3, #32
 8002642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a1e      	ldr	r2, [pc, #120]	; (80026cc <TIM_OC2_SetConfig+0xd4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d10d      	bne.n	8002674 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800265e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002672:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a15      	ldr	r2, [pc, #84]	; (80026cc <TIM_OC2_SetConfig+0xd4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d113      	bne.n	80026a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800268a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	621a      	str	r2, [r3, #32]
}
 80026be:	bf00      	nop
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40010000 	.word	0x40010000

080026d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0303 	bic.w	r3, r3, #3
 8002706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a1d      	ldr	r2, [pc, #116]	; (80027a0 <TIM_OC3_SetConfig+0xd0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10d      	bne.n	800274a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <TIM_OC3_SetConfig+0xd0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d113      	bne.n	800277a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	621a      	str	r2, [r3, #32]
}
 8002794:	bf00      	nop
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	40010000 	.word	0x40010000

080027a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	031b      	lsls	r3, r3, #12
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a10      	ldr	r2, [pc, #64]	; (8002840 <TIM_OC4_SetConfig+0x9c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d109      	bne.n	8002818 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800280a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	019b      	lsls	r3, r3, #6
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	621a      	str	r2, [r3, #32]
}
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40010000 	.word	0x40010000

08002844 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	2201      	movs	r2, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1a      	ldr	r2, [r3, #32]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	43db      	mvns	r3, r3
 8002866:	401a      	ands	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a1a      	ldr	r2, [r3, #32]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	431a      	orrs	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	621a      	str	r2, [r3, #32]
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e050      	b.n	800294a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d018      	beq.n	800291e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f4:	d013      	beq.n	800291e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00e      	beq.n	800291e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a16      	ldr	r2, [pc, #88]	; (8002960 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d009      	beq.n	800291e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a15      	ldr	r2, [pc, #84]	; (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d004      	beq.n	800291e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a13      	ldr	r2, [pc, #76]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d10c      	bne.n	8002938 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	4313      	orrs	r3, r2
 800292e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40010000 	.word	0x40010000
 800295c:	40000400 	.word	0x40000400
 8002960:	40000800 	.word	0x40000800
 8002964:	40000c00 	.word	0x40000c00
 8002968:	40014000 	.word	0x40014000

0800296c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002972:	463b      	mov	r3, r7
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800297e:	4b28      	ldr	r3, [pc, #160]	; (8002a20 <MX_ADC1_Init+0xb4>)
 8002980:	4a28      	ldr	r2, [pc, #160]	; (8002a24 <MX_ADC1_Init+0xb8>)
 8002982:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002984:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <MX_ADC1_Init+0xb4>)
 8002986:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800298a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800298c:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <MX_ADC1_Init+0xb4>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002992:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <MX_ADC1_Init+0xb4>)
 8002994:	2201      	movs	r2, #1
 8002996:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002998:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <MX_ADC1_Init+0xb4>)
 800299a:	2201      	movs	r2, #1
 800299c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <MX_ADC1_Init+0xb4>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029a6:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <MX_ADC1_Init+0xb4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <MX_ADC1_Init+0xb4>)
 80029ae:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <MX_ADC1_Init+0xbc>)
 80029b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029b2:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <MX_ADC1_Init+0xb4>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <MX_ADC1_Init+0xb4>)
 80029ba:	2202      	movs	r2, #2
 80029bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80029be:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <MX_ADC1_Init+0xb4>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029c6:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <MX_ADC1_Init+0xb4>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029cc:	4814      	ldr	r0, [pc, #80]	; (8002a20 <MX_ADC1_Init+0xb4>)
 80029ce:	f7fd fdef 	bl	80005b0 <HAL_ADC_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80029d8:	f000 fca4 	bl	8003324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80029dc:	230a      	movs	r3, #10
 80029de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80029e0:	2301      	movs	r3, #1
 80029e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80029e4:	2307      	movs	r3, #7
 80029e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029e8:	463b      	mov	r3, r7
 80029ea:	4619      	mov	r1, r3
 80029ec:	480c      	ldr	r0, [pc, #48]	; (8002a20 <MX_ADC1_Init+0xb4>)
 80029ee:	f7fd fe23 	bl	8000638 <HAL_ADC_ConfigChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80029f8:	f000 fc94 	bl	8003324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80029fc:	230b      	movs	r3, #11
 80029fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002a00:	2302      	movs	r3, #2
 8002a02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a04:	463b      	mov	r3, r7
 8002a06:	4619      	mov	r1, r3
 8002a08:	4805      	ldr	r0, [pc, #20]	; (8002a20 <MX_ADC1_Init+0xb4>)
 8002a0a:	f7fd fe15 	bl	8000638 <HAL_ADC_ConfigChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002a14:	f000 fc86 	bl	8003324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000044 	.word	0x20000044
 8002a24:	40012000 	.word	0x40012000
 8002a28:	0f000001 	.word	0x0f000001

08002a2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08a      	sub	sp, #40	; 0x28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	f107 0314 	add.w	r3, r7, #20
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a2f      	ldr	r2, [pc, #188]	; (8002b08 <HAL_ADC_MspInit+0xdc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d157      	bne.n	8002afe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <HAL_ADC_MspInit+0xe0>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4a2d      	ldr	r2, [pc, #180]	; (8002b0c <HAL_ADC_MspInit+0xe0>)
 8002a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5e:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <HAL_ADC_MspInit+0xe0>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <HAL_ADC_MspInit+0xe0>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a26      	ldr	r2, [pc, #152]	; (8002b0c <HAL_ADC_MspInit+0xe0>)
 8002a74:	f043 0304 	orr.w	r3, r3, #4
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <HAL_ADC_MspInit+0xe0>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = LS1_Pin|LS2_Pin;
 8002a86:	2303      	movs	r3, #3
 8002a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	4619      	mov	r1, r3
 8002a98:	481d      	ldr	r0, [pc, #116]	; (8002b10 <HAL_ADC_MspInit+0xe4>)
 8002a9a:	f7fe fbe7 	bl	800126c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HAL_ADC_MspInit+0xe8>)
 8002aa0:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <HAL_ADC_MspInit+0xec>)
 8002aa2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <HAL_ADC_MspInit+0xe8>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <HAL_ADC_MspInit+0xe8>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_ADC_MspInit+0xe8>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_ADC_MspInit+0xe8>)
 8002ab8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002abc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <HAL_ADC_MspInit+0xe8>)
 8002ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ac4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ac6:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <HAL_ADC_MspInit+0xe8>)
 8002ac8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002acc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <HAL_ADC_MspInit+0xe8>)
 8002ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ad6:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <HAL_ADC_MspInit+0xe8>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002adc:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <HAL_ADC_MspInit+0xe8>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ae2:	480c      	ldr	r0, [pc, #48]	; (8002b14 <HAL_ADC_MspInit+0xe8>)
 8002ae4:	f7fe f8d8 	bl	8000c98 <HAL_DMA_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002aee:	f000 fc19 	bl	8003324 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a07      	ldr	r2, [pc, #28]	; (8002b14 <HAL_ADC_MspInit+0xe8>)
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38
 8002af8:	4a06      	ldr	r2, [pc, #24]	; (8002b14 <HAL_ADC_MspInit+0xe8>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002afe:	bf00      	nop
 8002b00:	3728      	adds	r7, #40	; 0x28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40012000 	.word	0x40012000
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40020800 	.word	0x40020800
 8002b14:	2000008c 	.word	0x2000008c
 8002b18:	40026410 	.word	0x40026410

08002b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <MX_DMA_Init+0x3c>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <MX_DMA_Init+0x3c>)
 8002b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <MX_DMA_Init+0x3c>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3a:	607b      	str	r3, [r7, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2100      	movs	r1, #0
 8002b42:	2038      	movs	r0, #56	; 0x38
 8002b44:	f7fe f871 	bl	8000c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b48:	2038      	movs	r0, #56	; 0x38
 8002b4a:	f7fe f88a 	bl	8000c62 <HAL_NVIC_EnableIRQ>

}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800

08002b5c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b62:	f107 030c 	add.w	r3, r7, #12
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	4b3c      	ldr	r3, [pc, #240]	; (8002c68 <MX_GPIO_Init+0x10c>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a3b      	ldr	r2, [pc, #236]	; (8002c68 <MX_GPIO_Init+0x10c>)
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <MX_GPIO_Init+0x10c>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	4b35      	ldr	r3, [pc, #212]	; (8002c68 <MX_GPIO_Init+0x10c>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a34      	ldr	r2, [pc, #208]	; (8002c68 <MX_GPIO_Init+0x10c>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <MX_GPIO_Init+0x10c>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	607b      	str	r3, [r7, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	603b      	str	r3, [r7, #0]
 8002bae:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <MX_GPIO_Init+0x10c>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	4a2d      	ldr	r2, [pc, #180]	; (8002c68 <MX_GPIO_Init+0x10c>)
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bba:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <MX_GPIO_Init+0x10c>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I1_1_Pin|I1_2_Pin|LED3_Pin|LED2_Pin
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8002bcc:	4827      	ldr	r0, [pc, #156]	; (8002c6c <MX_GPIO_Init+0x110>)
 8002bce:	f7fe fce9 	bl	80015a4 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, I2_1_Pin|I2_2_Pin, GPIO_PIN_RESET);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2103      	movs	r1, #3
 8002bd6:	4826      	ldr	r0, [pc, #152]	; (8002c70 <MX_GPIO_Init+0x114>)
 8002bd8:	f7fe fce4 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = START_Pin;
 8002bdc:	2304      	movs	r3, #4
 8002bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002be0:	2300      	movs	r3, #0
 8002be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	4619      	mov	r1, r3
 8002bee:	481f      	ldr	r0, [pc, #124]	; (8002c6c <MX_GPIO_Init+0x110>)
 8002bf0:	f7fe fb3c 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = I1_1_Pin|I1_2_Pin|LED3_Pin|LED2_Pin
 8002bf4:	f44f 736c 	mov.w	r3, #944	; 0x3b0
 8002bf8:	60fb      	str	r3, [r7, #12]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c06:	f107 030c 	add.w	r3, r7, #12
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4817      	ldr	r0, [pc, #92]	; (8002c6c <MX_GPIO_Init+0x110>)
 8002c0e:	f7fe fb2d 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2_1_Pin|I2_2_Pin;
 8002c12:	2303      	movs	r3, #3
 8002c14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c16:	2301      	movs	r3, #1
 8002c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c22:	f107 030c 	add.w	r3, r7, #12
 8002c26:	4619      	mov	r1, r3
 8002c28:	4811      	ldr	r0, [pc, #68]	; (8002c70 <MX_GPIO_Init+0x114>)
 8002c2a:	f7fe fb1f 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW3_Pin|SW2_Pin|SW1_Pin;
 8002c2e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3c:	f107 030c 	add.w	r3, r7, #12
 8002c40:	4619      	mov	r1, r3
 8002c42:	480c      	ldr	r0, [pc, #48]	; (8002c74 <MX_GPIO_Init+0x118>)
 8002c44:	f7fe fb12 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SR_Pin|SF_Pin|SL_Pin;
 8002c48:	23a8      	movs	r3, #168	; 0xa8
 8002c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4805      	ldr	r0, [pc, #20]	; (8002c70 <MX_GPIO_Init+0x114>)
 8002c5c:	f7fe fb06 	bl	800126c <HAL_GPIO_Init>

}
 8002c60:	bf00      	nop
 8002c62:	3720      	adds	r7, #32
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020800 	.word	0x40020800
 8002c70:	40020400 	.word	0x40020400
 8002c74:	40020000 	.word	0x40020000

08002c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c7c:	f7fd fc26 	bl	80004cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c80:	f000 f8bc 	bl	8002dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c84:	f7ff ff6a 	bl	8002b5c <MX_GPIO_Init>
  MX_DMA_Init();
 8002c88:	f7ff ff48 	bl	8002b1c <MX_DMA_Init>
  MX_ADC1_Init();
 8002c8c:	f7ff fe6e 	bl	800296c <MX_ADC1_Init>
  MX_TIM1_Init();
 8002c90:	f000 fc9e 	bl	80035d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002c94:	f000 fcf4 	bl	8003680 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002c98:	f000 fd46 	bl	8003728 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //////////////////Inicjalizacja czujnikow i ustawianie adresow//////////////////
  led(1);
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f000 f99f 	bl	8002fe0 <led>
  stoj(); //silniki stan niski
 8002ca2:	f000 f985 	bl	8002fb0 <stoj>

  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8002ca6:	213c      	movs	r1, #60	; 0x3c
 8002ca8:	484b      	ldr	r0, [pc, #300]	; (8002dd8 <main+0x160>)
 8002caa:	f7ff fa4f 	bl	800214c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL); //start enkodery
 8002cae:	213c      	movs	r1, #60	; 0x3c
 8002cb0:	484a      	ldr	r0, [pc, #296]	; (8002ddc <main+0x164>)
 8002cb2:	f7ff fa4b 	bl	800214c <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4849      	ldr	r0, [pc, #292]	; (8002de0 <main+0x168>)
 8002cba:	f7ff f8f1 	bl	8001ea0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //start pwm silnikow
 8002cbe:	2104      	movs	r1, #4
 8002cc0:	4847      	ldr	r0, [pc, #284]	; (8002de0 <main+0x168>)
 8002cc2:	f7ff f8ed 	bl	8001ea0 <HAL_TIM_PWM_Start>

  led(0); //koniec inicjalizacji
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f000 f98a 	bl	8002fe0 <led>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(START == 1)
 8002ccc:	2104      	movs	r1, #4
 8002cce:	4845      	ldr	r0, [pc, #276]	; (8002de4 <main+0x16c>)
 8002cd0:	f7fe fc50 	bl	8001574 <HAL_GPIO_ReadPin>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d169      	bne.n	8002dae <main+0x136>
	  {
		  led(1);
 8002cda:	2001      	movs	r0, #1
 8002cdc:	f000 f980 	bl	8002fe0 <led>
		  zerujE();
 8002ce0:	f000 f9de 	bl	80030a0 <zerujE>
		  if(SL == 1) // lewy widzi
 8002ce4:	2180      	movs	r1, #128	; 0x80
 8002ce6:	4840      	ldr	r0, [pc, #256]	; (8002de8 <main+0x170>)
 8002ce8:	f7fe fc44 	bl	8001574 <HAL_GPIO_ReadPin>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d11d      	bne.n	8002d2e <main+0xb6>
		  {
			while(ust_D_L<12000 && ust_D_P<12000)
 8002cf2:	e009      	b.n	8002d08 <main+0x90>
			{
				lewy();
 8002cf4:	f000 f964 	bl	8002fc0 <lewy>
				zad_V_L = 450;
 8002cf8:	4b3c      	ldr	r3, [pc, #240]	; (8002dec <main+0x174>)
 8002cfa:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002cfe:	601a      	str	r2, [r3, #0]
				zad_V_P = 400;
 8002d00:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <main+0x178>)
 8002d02:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d06:	601a      	str	r2, [r3, #0]
			while(ust_D_L<12000 && ust_D_P<12000)
 8002d08:	4b3a      	ldr	r3, [pc, #232]	; (8002df4 <main+0x17c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002d10:	4293      	cmp	r3, r2
 8002d12:	dc05      	bgt.n	8002d20 <main+0xa8>
 8002d14:	4b38      	ldr	r3, [pc, #224]	; (8002df8 <main+0x180>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	dde9      	ble.n	8002cf4 <main+0x7c>
			}
			zerujE();
 8002d20:	f000 f9be 	bl	80030a0 <zerujE>
			bialaL();
 8002d24:	f000 fa4c 	bl	80031c0 <bialaL>
			stoj();
 8002d28:	f000 f942 	bl	8002fb0 <stoj>
 8002d2c:	e03c      	b.n	8002da8 <main+0x130>
		  }
		  else if(SR == 1) //prawy widzi
 8002d2e:	2108      	movs	r1, #8
 8002d30:	482d      	ldr	r0, [pc, #180]	; (8002de8 <main+0x170>)
 8002d32:	f7fe fc1f 	bl	8001574 <HAL_GPIO_ReadPin>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d11d      	bne.n	8002d78 <main+0x100>
		  {
			while(ust_D_L<12000 && ust_D_P<12000)
 8002d3c:	e009      	b.n	8002d52 <main+0xda>
			{
				prawy();
 8002d3e:	f000 f947 	bl	8002fd0 <prawy>
				zad_V_L = 400;
 8002d42:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <main+0x174>)
 8002d44:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d48:	601a      	str	r2, [r3, #0]
				zad_V_P = 450;
 8002d4a:	4b29      	ldr	r3, [pc, #164]	; (8002df0 <main+0x178>)
 8002d4c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002d50:	601a      	str	r2, [r3, #0]
			while(ust_D_L<12000 && ust_D_P<12000)
 8002d52:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <main+0x17c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	dc05      	bgt.n	8002d6a <main+0xf2>
 8002d5e:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <main+0x180>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002d66:	4293      	cmp	r3, r2
 8002d68:	dde9      	ble.n	8002d3e <main+0xc6>
			}
			zerujE();
 8002d6a:	f000 f999 	bl	80030a0 <zerujE>
			bialaL();
 8002d6e:	f000 fa27 	bl	80031c0 <bialaL>
			stoj();
 8002d72:	f000 f91d 	bl	8002fb0 <stoj>
 8002d76:	e017      	b.n	8002da8 <main+0x130>
		  }
		  else if(SF == 1) //przod widzi
 8002d78:	2120      	movs	r1, #32
 8002d7a:	481b      	ldr	r0, [pc, #108]	; (8002de8 <main+0x170>)
 8002d7c:	f7fe fbfa 	bl	8001574 <HAL_GPIO_ReadPin>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d104      	bne.n	8002d90 <main+0x118>
		  {
			  soft_start();
 8002d86:	f000 f99d 	bl	80030c4 <soft_start>
			  bialaL();
 8002d8a:	f000 fa19 	bl	80031c0 <bialaL>
 8002d8e:	e00b      	b.n	8002da8 <main+0x130>
		  }
		  else
		  {
			  prawy();
 8002d90:	f000 f91e 	bl	8002fd0 <prawy>
			  zad_V_L = 400;
 8002d94:	4b15      	ldr	r3, [pc, #84]	; (8002dec <main+0x174>)
 8002d96:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d9a:	601a      	str	r2, [r3, #0]
			  zad_V_P = 450;
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <main+0x178>)
 8002d9e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002da2:	601a      	str	r2, [r3, #0]
			  bialaL();
 8002da4:	f000 fa0c 	bl	80031c0 <bialaL>
		  }
		  zerujE();
 8002da8:	f000 f97a 	bl	80030a0 <zerujE>
 8002dac:	e78e      	b.n	8002ccc <main+0x54>
	  }
	  else if(START == 0)
 8002dae:	2104      	movs	r1, #4
 8002db0:	480c      	ldr	r0, [pc, #48]	; (8002de4 <main+0x16c>)
 8002db2:	f7fe fbdf 	bl	8001574 <HAL_GPIO_ReadPin>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d187      	bne.n	8002ccc <main+0x54>
	  {
		led(0);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f000 f90f 	bl	8002fe0 <led>
		stoj();
 8002dc2:	f000 f8f5 	bl	8002fb0 <stoj>
		zad_V_L = 0;
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <main+0x174>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
		zad_V_P = 0;
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <main+0x178>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
		bialaL();
 8002dd2:	f000 f9f5 	bl	80031c0 <bialaL>
	  if(START == 1)
 8002dd6:	e779      	b.n	8002ccc <main+0x54>
 8002dd8:	20000168 	.word	0x20000168
 8002ddc:	200001b0 	.word	0x200001b0
 8002de0:	20000120 	.word	0x20000120
 8002de4:	40020800 	.word	0x40020800
 8002de8:	40020400 	.word	0x40020400
 8002dec:	20000108 	.word	0x20000108
 8002df0:	200000f4 	.word	0x200000f4
 8002df4:	200000f0 	.word	0x200000f0
 8002df8:	200000ec 	.word	0x200000ec

08002dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b094      	sub	sp, #80	; 0x50
 8002e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e02:	f107 0320 	add.w	r3, r7, #32
 8002e06:	2230      	movs	r2, #48	; 0x30
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fe14 	bl	8003a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e10:	f107 030c 	add.w	r3, r7, #12
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	4b28      	ldr	r3, [pc, #160]	; (8002ec8 <SystemClock_Config+0xcc>)
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	4a27      	ldr	r2, [pc, #156]	; (8002ec8 <SystemClock_Config+0xcc>)
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <SystemClock_Config+0xcc>)
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <SystemClock_Config+0xd0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e48:	4a20      	ldr	r2, [pc, #128]	; (8002ecc <SystemClock_Config+0xd0>)
 8002e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <SystemClock_Config+0xd0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e60:	2301      	movs	r3, #1
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e64:	2310      	movs	r3, #16
 8002e66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e70:	2308      	movs	r3, #8
 8002e72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002e74:	2354      	movs	r3, #84	; 0x54
 8002e76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e80:	f107 0320 	add.w	r3, r7, #32
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fba7 	bl	80015d8 <HAL_RCC_OscConfig>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002e90:	f000 fa48 	bl	8003324 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e94:	230f      	movs	r3, #15
 8002e96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002eaa:	f107 030c 	add.w	r3, r7, #12
 8002eae:	2102      	movs	r1, #2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe fe09 	bl	8001ac8 <HAL_RCC_ClockConfig>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002ebc:	f000 fa32 	bl	8003324 <Error_Handler>
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	3750      	adds	r7, #80	; 0x50
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40007000 	.word	0x40007000

08002ed0 <LS_tyl>:

/* USER CODE BEGIN 4 */
void LS_tyl(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I1_1_GPIO_Port, I1_1_Pin, RESET);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2110      	movs	r1, #16
 8002ed8:	4804      	ldr	r0, [pc, #16]	; (8002eec <LS_tyl+0x1c>)
 8002eda:	f7fe fb63 	bl	80015a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I1_2_GPIO_Port, I1_2_Pin, SET);
 8002ede:	2201      	movs	r2, #1
 8002ee0:	2120      	movs	r1, #32
 8002ee2:	4802      	ldr	r0, [pc, #8]	; (8002eec <LS_tyl+0x1c>)
 8002ee4:	f7fe fb5e 	bl	80015a4 <HAL_GPIO_WritePin>
}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40020800 	.word	0x40020800

08002ef0 <LS_przod>:

void LS_przod(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I1_1_GPIO_Port, I1_1_Pin, SET);
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	2110      	movs	r1, #16
 8002ef8:	4804      	ldr	r0, [pc, #16]	; (8002f0c <LS_przod+0x1c>)
 8002efa:	f7fe fb53 	bl	80015a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I1_2_GPIO_Port, I1_2_Pin, RESET);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2120      	movs	r1, #32
 8002f02:	4802      	ldr	r0, [pc, #8]	; (8002f0c <LS_przod+0x1c>)
 8002f04:	f7fe fb4e 	bl	80015a4 <HAL_GPIO_WritePin>
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40020800 	.word	0x40020800

08002f10 <LS_stop>:

void LS_stop(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I1_1_GPIO_Port, I1_1_Pin, RESET);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2110      	movs	r1, #16
 8002f18:	4804      	ldr	r0, [pc, #16]	; (8002f2c <LS_stop+0x1c>)
 8002f1a:	f7fe fb43 	bl	80015a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I1_2_GPIO_Port, I1_2_Pin, RESET);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2120      	movs	r1, #32
 8002f22:	4802      	ldr	r0, [pc, #8]	; (8002f2c <LS_stop+0x1c>)
 8002f24:	f7fe fb3e 	bl	80015a4 <HAL_GPIO_WritePin>
}
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40020800 	.word	0x40020800

08002f30 <PS_tyl>:

void PS_tyl(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I2_1_GPIO_Port, I2_1_Pin, SET);
 8002f34:	2201      	movs	r2, #1
 8002f36:	2101      	movs	r1, #1
 8002f38:	4804      	ldr	r0, [pc, #16]	; (8002f4c <PS_tyl+0x1c>)
 8002f3a:	f7fe fb33 	bl	80015a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2_2_GPIO_Port, I2_2_Pin, RESET);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2102      	movs	r1, #2
 8002f42:	4802      	ldr	r0, [pc, #8]	; (8002f4c <PS_tyl+0x1c>)
 8002f44:	f7fe fb2e 	bl	80015a4 <HAL_GPIO_WritePin>
}
 8002f48:	bf00      	nop
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40020400 	.word	0x40020400

08002f50 <PS_przod>:

void PS_przod(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I2_1_GPIO_Port, I2_1_Pin, RESET);
 8002f54:	2200      	movs	r2, #0
 8002f56:	2101      	movs	r1, #1
 8002f58:	4804      	ldr	r0, [pc, #16]	; (8002f6c <PS_przod+0x1c>)
 8002f5a:	f7fe fb23 	bl	80015a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2_2_GPIO_Port, I2_2_Pin, SET);
 8002f5e:	2201      	movs	r2, #1
 8002f60:	2102      	movs	r1, #2
 8002f62:	4802      	ldr	r0, [pc, #8]	; (8002f6c <PS_przod+0x1c>)
 8002f64:	f7fe fb1e 	bl	80015a4 <HAL_GPIO_WritePin>
}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40020400 	.word	0x40020400

08002f70 <PS_stop>:

void PS_stop(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I2_1_GPIO_Port, I2_1_Pin, RESET);
 8002f74:	2200      	movs	r2, #0
 8002f76:	2101      	movs	r1, #1
 8002f78:	4804      	ldr	r0, [pc, #16]	; (8002f8c <PS_stop+0x1c>)
 8002f7a:	f7fe fb13 	bl	80015a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2_2_GPIO_Port, I2_2_Pin, RESET);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2102      	movs	r1, #2
 8002f82:	4802      	ldr	r0, [pc, #8]	; (8002f8c <PS_stop+0x1c>)
 8002f84:	f7fe fb0e 	bl	80015a4 <HAL_GPIO_WritePin>
}
 8002f88:	bf00      	nop
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40020400 	.word	0x40020400

08002f90 <przod>:

void przod(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
	PS_przod();
 8002f94:	f7ff ffdc 	bl	8002f50 <PS_przod>
	LS_przod();
 8002f98:	f7ff ffaa 	bl	8002ef0 <LS_przod>
}
 8002f9c:	bf00      	nop
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <tyl>:

void tyl(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
	PS_tyl();
 8002fa4:	f7ff ffc4 	bl	8002f30 <PS_tyl>
	LS_tyl();
 8002fa8:	f7ff ff92 	bl	8002ed0 <LS_tyl>
}
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <stoj>:

void stoj(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
	PS_stop();
 8002fb4:	f7ff ffdc 	bl	8002f70 <PS_stop>
	LS_stop();
 8002fb8:	f7ff ffaa 	bl	8002f10 <LS_stop>
}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <lewy>:
	PS_tyl();
	LS_stop();
}

void lewy(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
	PS_przod();
 8002fc4:	f7ff ffc4 	bl	8002f50 <PS_przod>
	LS_tyl();
 8002fc8:	f7ff ff82 	bl	8002ed0 <LS_tyl>
}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <prawy>:

void prawy(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
	PS_tyl();
 8002fd4:	f7ff ffac 	bl	8002f30 <PS_tyl>
	LS_przod();
 8002fd8:	f7ff ff8a 	bl	8002ef0 <LS_przod>
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <led>:
		else ls[i]=0;
	}
}

void led(int num)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d852      	bhi.n	8003094 <led+0xb4>
 8002fee:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <led+0x14>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	08003029 	.word	0x08003029
 8002ffc:	0800304d 	.word	0x0800304d
 8003000:	08003071 	.word	0x08003071
	switch(num)
	{
	case 0:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8003004:	2200      	movs	r2, #0
 8003006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800300a:	4824      	ldr	r0, [pc, #144]	; (800309c <led+0xbc>)
 800300c:	f7fe faca 	bl	80015a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8003010:	2200      	movs	r2, #0
 8003012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003016:	4821      	ldr	r0, [pc, #132]	; (800309c <led+0xbc>)
 8003018:	f7fe fac4 	bl	80015a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 800301c:	2200      	movs	r2, #0
 800301e:	2180      	movs	r1, #128	; 0x80
 8003020:	481e      	ldr	r0, [pc, #120]	; (800309c <led+0xbc>)
 8003022:	f7fe fabf 	bl	80015a4 <HAL_GPIO_WritePin>
		break;
 8003026:	e035      	b.n	8003094 <led+0xb4>
	case 1:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8003028:	2201      	movs	r2, #1
 800302a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800302e:	481b      	ldr	r0, [pc, #108]	; (800309c <led+0xbc>)
 8003030:	f7fe fab8 	bl	80015a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8003034:	2200      	movs	r2, #0
 8003036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800303a:	4818      	ldr	r0, [pc, #96]	; (800309c <led+0xbc>)
 800303c:	f7fe fab2 	bl	80015a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8003040:	2200      	movs	r2, #0
 8003042:	2180      	movs	r1, #128	; 0x80
 8003044:	4815      	ldr	r0, [pc, #84]	; (800309c <led+0xbc>)
 8003046:	f7fe faad 	bl	80015a4 <HAL_GPIO_WritePin>
		break;
 800304a:	e023      	b.n	8003094 <led+0xb4>
	case 2:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 800304c:	2201      	movs	r2, #1
 800304e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003052:	4812      	ldr	r0, [pc, #72]	; (800309c <led+0xbc>)
 8003054:	f7fe faa6 	bl	80015a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8003058:	2201      	movs	r2, #1
 800305a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800305e:	480f      	ldr	r0, [pc, #60]	; (800309c <led+0xbc>)
 8003060:	f7fe faa0 	bl	80015a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8003064:	2200      	movs	r2, #0
 8003066:	2180      	movs	r1, #128	; 0x80
 8003068:	480c      	ldr	r0, [pc, #48]	; (800309c <led+0xbc>)
 800306a:	f7fe fa9b 	bl	80015a4 <HAL_GPIO_WritePin>
		break;
 800306e:	e011      	b.n	8003094 <led+0xb4>
	case 3:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8003070:	2201      	movs	r2, #1
 8003072:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003076:	4809      	ldr	r0, [pc, #36]	; (800309c <led+0xbc>)
 8003078:	f7fe fa94 	bl	80015a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 800307c:	2201      	movs	r2, #1
 800307e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003082:	4806      	ldr	r0, [pc, #24]	; (800309c <led+0xbc>)
 8003084:	f7fe fa8e 	bl	80015a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8003088:	2201      	movs	r2, #1
 800308a:	2180      	movs	r1, #128	; 0x80
 800308c:	4803      	ldr	r0, [pc, #12]	; (800309c <led+0xbc>)
 800308e:	f7fe fa89 	bl	80015a4 <HAL_GPIO_WritePin>
		break;
 8003092:	bf00      	nop
	}
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40020800 	.word	0x40020800

080030a0 <zerujE>:
	led(taktyka);
	return taktyka;
}

void zerujE()
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
	ust_D_P = 0;
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <zerujE+0x1c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
	ust_D_L = 0;
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <zerujE+0x20>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	200000ec 	.word	0x200000ec
 80030c0:	200000f0 	.word	0x200000f0

080030c4 <soft_start>:

void soft_start()
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
		zerujE();
 80030c8:	f7ff ffea 	bl	80030a0 <zerujE>
		while(ust_D_L < 4000 && ust_D_P < 4000)
 80030cc:	e007      	b.n	80030de <soft_start+0x1a>
		{
			przod();
 80030ce:	f7ff ff5f 	bl	8002f90 <przod>
			zad_V_L = 50;
 80030d2:	4b37      	ldr	r3, [pc, #220]	; (80031b0 <soft_start+0xec>)
 80030d4:	2232      	movs	r2, #50	; 0x32
 80030d6:	601a      	str	r2, [r3, #0]
			zad_V_P = 50;
 80030d8:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <soft_start+0xf0>)
 80030da:	2232      	movs	r2, #50	; 0x32
 80030dc:	601a      	str	r2, [r3, #0]
		while(ust_D_L < 4000 && ust_D_P < 4000)
 80030de:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <soft_start+0xf4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80030e6:	da04      	bge.n	80030f2 <soft_start+0x2e>
 80030e8:	4b34      	ldr	r3, [pc, #208]	; (80031bc <soft_start+0xf8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80030f0:	dbed      	blt.n	80030ce <soft_start+0xa>
		}
		zerujE();
 80030f2:	f7ff ffd5 	bl	80030a0 <zerujE>

		while(ust_D_L < 2000 && ust_D_P < 2000)
 80030f6:	e007      	b.n	8003108 <soft_start+0x44>
		{
			przod();
 80030f8:	f7ff ff4a 	bl	8002f90 <przod>
			zad_V_L = 100;
 80030fc:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <soft_start+0xec>)
 80030fe:	2264      	movs	r2, #100	; 0x64
 8003100:	601a      	str	r2, [r3, #0]
			zad_V_P = 100;
 8003102:	4b2c      	ldr	r3, [pc, #176]	; (80031b4 <soft_start+0xf0>)
 8003104:	2264      	movs	r2, #100	; 0x64
 8003106:	601a      	str	r2, [r3, #0]
		while(ust_D_L < 2000 && ust_D_P < 2000)
 8003108:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <soft_start+0xf4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003110:	da04      	bge.n	800311c <soft_start+0x58>
 8003112:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <soft_start+0xf8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800311a:	dbed      	blt.n	80030f8 <soft_start+0x34>
		}
		zerujE();
 800311c:	f7ff ffc0 	bl	80030a0 <zerujE>

		while(ust_D_L < 2000 && ust_D_P < 2000)
 8003120:	e009      	b.n	8003136 <soft_start+0x72>
		{
			przod();
 8003122:	f7ff ff35 	bl	8002f90 <przod>
			zad_V_L = 300;
 8003126:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <soft_start+0xec>)
 8003128:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800312c:	601a      	str	r2, [r3, #0]
			zad_V_P = 300;
 800312e:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <soft_start+0xf0>)
 8003130:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003134:	601a      	str	r2, [r3, #0]
		while(ust_D_L < 2000 && ust_D_P < 2000)
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <soft_start+0xf4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800313e:	da04      	bge.n	800314a <soft_start+0x86>
 8003140:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <soft_start+0xf8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003148:	dbeb      	blt.n	8003122 <soft_start+0x5e>
		}
		zerujE();
 800314a:	f7ff ffa9 	bl	80030a0 <zerujE>

		while(ust_D_L < 2000 && ust_D_P < 2000)
 800314e:	e009      	b.n	8003164 <soft_start+0xa0>
		{
			przod();
 8003150:	f7ff ff1e 	bl	8002f90 <przod>
			zad_V_L = 700;
 8003154:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <soft_start+0xec>)
 8003156:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800315a:	601a      	str	r2, [r3, #0]
			zad_V_P = 700;
 800315c:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <soft_start+0xf0>)
 800315e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8003162:	601a      	str	r2, [r3, #0]
		while(ust_D_L < 2000 && ust_D_P < 2000)
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <soft_start+0xf4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800316c:	da04      	bge.n	8003178 <soft_start+0xb4>
 800316e:	4b13      	ldr	r3, [pc, #76]	; (80031bc <soft_start+0xf8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003176:	dbeb      	blt.n	8003150 <soft_start+0x8c>
		}
		zerujE();
 8003178:	f7ff ff92 	bl	80030a0 <zerujE>

		while(ust_D_L < 2000 && ust_D_P < 2000)
 800317c:	e009      	b.n	8003192 <soft_start+0xce>
		{
			przod();
 800317e:	f7ff ff07 	bl	8002f90 <przod>
			zad_V_L = 1000;
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <soft_start+0xec>)
 8003184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003188:	601a      	str	r2, [r3, #0]
			zad_V_P = 1000;
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <soft_start+0xf0>)
 800318c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003190:	601a      	str	r2, [r3, #0]
		while(ust_D_L < 2000 && ust_D_P < 2000)
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <soft_start+0xf4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800319a:	da04      	bge.n	80031a6 <soft_start+0xe2>
 800319c:	4b07      	ldr	r3, [pc, #28]	; (80031bc <soft_start+0xf8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80031a4:	dbeb      	blt.n	800317e <soft_start+0xba>
		}
		zerujE();
 80031a6:	f7ff ff7b 	bl	80030a0 <zerujE>
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000108 	.word	0x20000108
 80031b4:	200000f4 	.word	0x200000f4
 80031b8:	200000f0 	.word	0x200000f0
 80031bc:	200000ec 	.word	0x200000ec

080031c0 <bialaL>:

void bialaL()
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	zerujE();
 80031c4:	f7ff ff6c 	bl	80030a0 <zerujE>
	if(linia[0]<1000 && linia[1]>1000) //prawy widzi linie
 80031c8:	4b51      	ldr	r3, [pc, #324]	; (8003310 <bialaL+0x150>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031d0:	d22f      	bcs.n	8003232 <bialaL+0x72>
 80031d2:	4b4f      	ldr	r3, [pc, #316]	; (8003310 <bialaL+0x150>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031da:	d92a      	bls.n	8003232 <bialaL+0x72>
	{
		stoj();
 80031dc:	f7ff fee8 	bl	8002fb0 <stoj>
		while(ust_D_L<10000 && ust_D_P<10000)
 80031e0:	e007      	b.n	80031f2 <bialaL+0x32>
		{
			tyl();
 80031e2:	f7ff fedd 	bl	8002fa0 <tyl>
			zad_V_L = 200;
 80031e6:	4b4b      	ldr	r3, [pc, #300]	; (8003314 <bialaL+0x154>)
 80031e8:	22c8      	movs	r2, #200	; 0xc8
 80031ea:	601a      	str	r2, [r3, #0]
			zad_V_P = 200;
 80031ec:	4b4a      	ldr	r3, [pc, #296]	; (8003318 <bialaL+0x158>)
 80031ee:	22c8      	movs	r2, #200	; 0xc8
 80031f0:	601a      	str	r2, [r3, #0]
		while(ust_D_L<10000 && ust_D_P<10000)
 80031f2:	4b4a      	ldr	r3, [pc, #296]	; (800331c <bialaL+0x15c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80031fa:	4293      	cmp	r3, r2
 80031fc:	dc05      	bgt.n	800320a <bialaL+0x4a>
 80031fe:	4b48      	ldr	r3, [pc, #288]	; (8003320 <bialaL+0x160>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f242 720f 	movw	r2, #9999	; 0x270f
 8003206:	4293      	cmp	r3, r2
 8003208:	ddeb      	ble.n	80031e2 <bialaL+0x22>
		}
		zerujE();
 800320a:	f7ff ff49 	bl	80030a0 <zerujE>
		while(ust_D_L<20000)
 800320e:	e007      	b.n	8003220 <bialaL+0x60>
		{
			lewy();
 8003210:	f7ff fed6 	bl	8002fc0 <lewy>
			zad_V_L = 200;
 8003214:	4b3f      	ldr	r3, [pc, #252]	; (8003314 <bialaL+0x154>)
 8003216:	22c8      	movs	r2, #200	; 0xc8
 8003218:	601a      	str	r2, [r3, #0]
			zad_V_P = 150;
 800321a:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <bialaL+0x158>)
 800321c:	2296      	movs	r2, #150	; 0x96
 800321e:	601a      	str	r2, [r3, #0]
		while(ust_D_L<20000)
 8003220:	4b3e      	ldr	r3, [pc, #248]	; (800331c <bialaL+0x15c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003228:	4293      	cmp	r3, r2
 800322a:	ddf1      	ble.n	8003210 <bialaL+0x50>
		}
		stoj();
 800322c:	f7ff fec0 	bl	8002fb0 <stoj>
 8003230:	e06a      	b.n	8003308 <bialaL+0x148>
	}
	else if(linia[0]>1000 && linia[1]<1000) //lewy widzi linie
 8003232:	4b37      	ldr	r3, [pc, #220]	; (8003310 <bialaL+0x150>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800323a:	d92f      	bls.n	800329c <bialaL+0xdc>
 800323c:	4b34      	ldr	r3, [pc, #208]	; (8003310 <bialaL+0x150>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003244:	d22a      	bcs.n	800329c <bialaL+0xdc>
	{
		stoj();
 8003246:	f7ff feb3 	bl	8002fb0 <stoj>
		while(ust_D_L<10000 && ust_D_P<10000)
 800324a:	e007      	b.n	800325c <bialaL+0x9c>
		{
			tyl();
 800324c:	f7ff fea8 	bl	8002fa0 <tyl>
			zad_V_L = 200;
 8003250:	4b30      	ldr	r3, [pc, #192]	; (8003314 <bialaL+0x154>)
 8003252:	22c8      	movs	r2, #200	; 0xc8
 8003254:	601a      	str	r2, [r3, #0]
			zad_V_P = 200;
 8003256:	4b30      	ldr	r3, [pc, #192]	; (8003318 <bialaL+0x158>)
 8003258:	22c8      	movs	r2, #200	; 0xc8
 800325a:	601a      	str	r2, [r3, #0]
		while(ust_D_L<10000 && ust_D_P<10000)
 800325c:	4b2f      	ldr	r3, [pc, #188]	; (800331c <bialaL+0x15c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f242 720f 	movw	r2, #9999	; 0x270f
 8003264:	4293      	cmp	r3, r2
 8003266:	dc05      	bgt.n	8003274 <bialaL+0xb4>
 8003268:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <bialaL+0x160>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003270:	4293      	cmp	r3, r2
 8003272:	ddeb      	ble.n	800324c <bialaL+0x8c>
		}
		zerujE();
 8003274:	f7ff ff14 	bl	80030a0 <zerujE>
		while(ust_D_P<20000)
 8003278:	e007      	b.n	800328a <bialaL+0xca>
		{
			prawy();
 800327a:	f7ff fea9 	bl	8002fd0 <prawy>
			zad_V_L = 150;
 800327e:	4b25      	ldr	r3, [pc, #148]	; (8003314 <bialaL+0x154>)
 8003280:	2296      	movs	r2, #150	; 0x96
 8003282:	601a      	str	r2, [r3, #0]
			zad_V_P = 200;
 8003284:	4b24      	ldr	r3, [pc, #144]	; (8003318 <bialaL+0x158>)
 8003286:	22c8      	movs	r2, #200	; 0xc8
 8003288:	601a      	str	r2, [r3, #0]
		while(ust_D_P<20000)
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <bialaL+0x160>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003292:	4293      	cmp	r3, r2
 8003294:	ddf1      	ble.n	800327a <bialaL+0xba>
		}
		stoj();
 8003296:	f7ff fe8b 	bl	8002fb0 <stoj>
 800329a:	e035      	b.n	8003308 <bialaL+0x148>
	}
	else if(linia[0]<1000 && linia[1]<1000) //oba widza linie
 800329c:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <bialaL+0x150>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032a4:	d230      	bcs.n	8003308 <bialaL+0x148>
 80032a6:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <bialaL+0x150>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ae:	d22b      	bcs.n	8003308 <bialaL+0x148>
	{
		stoj();
 80032b0:	f7ff fe7e 	bl	8002fb0 <stoj>
		while(ust_D_L<30000 && ust_D_P<30000)
 80032b4:	e007      	b.n	80032c6 <bialaL+0x106>
		{
			tyl();
 80032b6:	f7ff fe73 	bl	8002fa0 <tyl>
			zad_V_L = 200;
 80032ba:	4b16      	ldr	r3, [pc, #88]	; (8003314 <bialaL+0x154>)
 80032bc:	22c8      	movs	r2, #200	; 0xc8
 80032be:	601a      	str	r2, [r3, #0]
			zad_V_P = 200;
 80032c0:	4b15      	ldr	r3, [pc, #84]	; (8003318 <bialaL+0x158>)
 80032c2:	22c8      	movs	r2, #200	; 0xc8
 80032c4:	601a      	str	r2, [r3, #0]
		while(ust_D_L<30000 && ust_D_P<30000)
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <bialaL+0x15c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f247 522f 	movw	r2, #29999	; 0x752f
 80032ce:	4293      	cmp	r3, r2
 80032d0:	dc05      	bgt.n	80032de <bialaL+0x11e>
 80032d2:	4b13      	ldr	r3, [pc, #76]	; (8003320 <bialaL+0x160>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f247 522f 	movw	r2, #29999	; 0x752f
 80032da:	4293      	cmp	r3, r2
 80032dc:	ddeb      	ble.n	80032b6 <bialaL+0xf6>
		}
		stoj();
 80032de:	f7ff fe67 	bl	8002fb0 <stoj>
		zerujE();
 80032e2:	f7ff fedd 	bl	80030a0 <zerujE>
		while(ust_D_L<60000)
 80032e6:	e007      	b.n	80032f8 <bialaL+0x138>
		{
			lewy();
 80032e8:	f7ff fe6a 	bl	8002fc0 <lewy>
			zad_V_L = 200;
 80032ec:	4b09      	ldr	r3, [pc, #36]	; (8003314 <bialaL+0x154>)
 80032ee:	22c8      	movs	r2, #200	; 0xc8
 80032f0:	601a      	str	r2, [r3, #0]
			zad_V_P = 150;
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <bialaL+0x158>)
 80032f4:	2296      	movs	r2, #150	; 0x96
 80032f6:	601a      	str	r2, [r3, #0]
		while(ust_D_L<60000)
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <bialaL+0x15c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003300:	4293      	cmp	r3, r2
 8003302:	ddf1      	ble.n	80032e8 <bialaL+0x128>
		}
		stoj();
 8003304:	f7ff fe54 	bl	8002fb0 <stoj>
	}
	zerujE();
 8003308:	f7ff feca 	bl	80030a0 <zerujE>
}
 800330c:	bf00      	nop
 800330e:	bd80      	pop	{r7, pc}
 8003310:	200000f8 	.word	0x200000f8
 8003314:	20000108 	.word	0x20000108
 8003318:	200000f4 	.word	0x200000f4
 800331c:	200000f0 	.word	0x200000f0
 8003320:	200000ec 	.word	0x200000ec

08003324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
	...

08003334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <HAL_MspInit+0x4c>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	4a0f      	ldr	r2, [pc, #60]	; (8003380 <HAL_MspInit+0x4c>)
 8003344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003348:	6453      	str	r3, [r2, #68]	; 0x44
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <HAL_MspInit+0x4c>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	603b      	str	r3, [r7, #0]
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_MspInit+0x4c>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a08      	ldr	r2, [pc, #32]	; (8003380 <HAL_MspInit+0x4c>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_MspInit+0x4c>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40023800 	.word	0x40023800

08003384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003396:	e7fe      	b.n	8003396 <HardFault_Handler+0x4>

08003398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800339c:	e7fe      	b.n	800339c <MemManage_Handler+0x4>

0800339e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033a2:	e7fe      	b.n	80033a2 <BusFault_Handler+0x4>

080033a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033a8:	e7fe      	b.n	80033a8 <UsageFault_Handler+0x4>

080033aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033aa:	b480      	push	{r7}
 80033ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	akt_V_L =TIM2->CNT;
 80033d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	461a      	mov	r2, r3
 80033e0:	4b5b      	ldr	r3, [pc, #364]	; (8003550 <SysTick_Handler+0x17c>)
 80033e2:	601a      	str	r2, [r3, #0]
	akt_V_P =TIM1->CNT;
 80033e4:	4b5b      	ldr	r3, [pc, #364]	; (8003554 <SysTick_Handler+0x180>)
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b5b      	ldr	r3, [pc, #364]	; (8003558 <SysTick_Handler+0x184>)
 80033ec:	601a      	str	r2, [r3, #0]

	if(akt_V_L>9000)
 80033ee:	4b58      	ldr	r3, [pc, #352]	; (8003550 <SysTick_Handler+0x17c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f242 3228 	movw	r2, #9000	; 0x2328
 80033f6:	4293      	cmp	r3, r2
 80033f8:	dd05      	ble.n	8003406 <SysTick_Handler+0x32>
	{
		akt_V_L = 9728 - akt_V_L;
 80033fa:	4b55      	ldr	r3, [pc, #340]	; (8003550 <SysTick_Handler+0x17c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f5c3 5318 	rsb	r3, r3, #9728	; 0x2600
 8003402:	4a53      	ldr	r2, [pc, #332]	; (8003550 <SysTick_Handler+0x17c>)
 8003404:	6013      	str	r3, [r2, #0]
	}

	if(akt_V_P>9000)
 8003406:	4b54      	ldr	r3, [pc, #336]	; (8003558 <SysTick_Handler+0x184>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f242 3228 	movw	r2, #9000	; 0x2328
 800340e:	4293      	cmp	r3, r2
 8003410:	dd05      	ble.n	800341e <SysTick_Handler+0x4a>
	{
		akt_V_P = 9728 - akt_V_P;
 8003412:	4b51      	ldr	r3, [pc, #324]	; (8003558 <SysTick_Handler+0x184>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f5c3 5318 	rsb	r3, r3, #9728	; 0x2600
 800341a:	4a4f      	ldr	r2, [pc, #316]	; (8003558 <SysTick_Handler+0x184>)
 800341c:	6013      	str	r3, [r2, #0]
	}

	ust_D_P += akt_V_P;
 800341e:	4b4e      	ldr	r3, [pc, #312]	; (8003558 <SysTick_Handler+0x184>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	4b4e      	ldr	r3, [pc, #312]	; (800355c <SysTick_Handler+0x188>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4413      	add	r3, r2
 8003428:	4a4c      	ldr	r2, [pc, #304]	; (800355c <SysTick_Handler+0x188>)
 800342a:	6013      	str	r3, [r2, #0]
	ust_D_L += akt_V_L;
 800342c:	4b48      	ldr	r3, [pc, #288]	; (8003550 <SysTick_Handler+0x17c>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b4b      	ldr	r3, [pc, #300]	; (8003560 <SysTick_Handler+0x18c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4413      	add	r3, r2
 8003436:	4a4a      	ldr	r2, [pc, #296]	; (8003560 <SysTick_Handler+0x18c>)
 8003438:	6013      	str	r3, [r2, #0]

	akt_bl_L = zad_V_L - akt_V_L;
 800343a:	4b4a      	ldr	r3, [pc, #296]	; (8003564 <SysTick_Handler+0x190>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b44      	ldr	r3, [pc, #272]	; (8003550 <SysTick_Handler+0x17c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	4a48      	ldr	r2, [pc, #288]	; (8003568 <SysTick_Handler+0x194>)
 8003446:	6013      	str	r3, [r2, #0]
	akt_bl_P = zad_V_P - akt_V_P;
 8003448:	4b48      	ldr	r3, [pc, #288]	; (800356c <SysTick_Handler+0x198>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4b42      	ldr	r3, [pc, #264]	; (8003558 <SysTick_Handler+0x184>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	4a47      	ldr	r2, [pc, #284]	; (8003570 <SysTick_Handler+0x19c>)
 8003454:	6013      	str	r3, [r2, #0]

	nowe_PWM_L = P * akt_bl_L + D * (akt_bl_L - wcz_bl_L);
 8003456:	4b44      	ldr	r3, [pc, #272]	; (8003568 <SysTick_Handler+0x194>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003462:	4b44      	ldr	r3, [pc, #272]	; (8003574 <SysTick_Handler+0x1a0>)
 8003464:	edd3 7a00 	vldr	s15, [r3]
 8003468:	ee27 7a27 	vmul.f32	s14, s14, s15
 800346c:	4b3e      	ldr	r3, [pc, #248]	; (8003568 <SysTick_Handler+0x194>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4b41      	ldr	r3, [pc, #260]	; (8003578 <SysTick_Handler+0x1a4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800347e:	4b3f      	ldr	r3, [pc, #252]	; (800357c <SysTick_Handler+0x1a8>)
 8003480:	edd3 7a00 	vldr	s15, [r3]
 8003484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003490:	ee17 2a90 	vmov	r2, s15
 8003494:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <SysTick_Handler+0x1ac>)
 8003496:	601a      	str	r2, [r3, #0]
	nowe_PWM_P = P * akt_bl_P + D * (akt_bl_P - wcz_bl_P);
 8003498:	4b35      	ldr	r3, [pc, #212]	; (8003570 <SysTick_Handler+0x19c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	ee07 3a90 	vmov	s15, r3
 80034a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034a4:	4b33      	ldr	r3, [pc, #204]	; (8003574 <SysTick_Handler+0x1a0>)
 80034a6:	edd3 7a00 	vldr	s15, [r3]
 80034aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ae:	4b30      	ldr	r3, [pc, #192]	; (8003570 <SysTick_Handler+0x19c>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4b34      	ldr	r3, [pc, #208]	; (8003584 <SysTick_Handler+0x1b0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	ee07 3a90 	vmov	s15, r3
 80034bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80034c0:	4b2e      	ldr	r3, [pc, #184]	; (800357c <SysTick_Handler+0x1a8>)
 80034c2:	edd3 7a00 	vldr	s15, [r3]
 80034c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034d2:	ee17 2a90 	vmov	r2, s15
 80034d6:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <SysTick_Handler+0x1b4>)
 80034d8:	601a      	str	r2, [r3, #0]
	wcz_bl_L = akt_bl_L;
 80034da:	4b23      	ldr	r3, [pc, #140]	; (8003568 <SysTick_Handler+0x194>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a26      	ldr	r2, [pc, #152]	; (8003578 <SysTick_Handler+0x1a4>)
 80034e0:	6013      	str	r3, [r2, #0]
	wcz_bl_P = akt_bl_P;
 80034e2:	4b23      	ldr	r3, [pc, #140]	; (8003570 <SysTick_Handler+0x19c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a27      	ldr	r2, [pc, #156]	; (8003584 <SysTick_Handler+0x1b0>)
 80034e8:	6013      	str	r3, [r2, #0]

	if(nowe_PWM_L<0)nowe_PWM_L=0;
 80034ea:	4b25      	ldr	r3, [pc, #148]	; (8003580 <SysTick_Handler+0x1ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	da02      	bge.n	80034f8 <SysTick_Handler+0x124>
 80034f2:	4b23      	ldr	r3, [pc, #140]	; (8003580 <SysTick_Handler+0x1ac>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
	if(nowe_PWM_P<0)nowe_PWM_P=0;
 80034f8:	4b23      	ldr	r3, [pc, #140]	; (8003588 <SysTick_Handler+0x1b4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	da02      	bge.n	8003506 <SysTick_Handler+0x132>
 8003500:	4b21      	ldr	r3, [pc, #132]	; (8003588 <SysTick_Handler+0x1b4>)
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
	if(nowe_PWM_L>v_max)nowe_PWM_L=v_max;
 8003506:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <SysTick_Handler+0x1ac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800350e:	dd03      	ble.n	8003518 <SysTick_Handler+0x144>
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <SysTick_Handler+0x1ac>)
 8003512:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003516:	601a      	str	r2, [r3, #0]
	if(nowe_PWM_P>v_max)nowe_PWM_P=v_max; //zabezpieczenia anti-windup
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <SysTick_Handler+0x1b4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003520:	dd03      	ble.n	800352a <SysTick_Handler+0x156>
 8003522:	4b19      	ldr	r3, [pc, #100]	; (8003588 <SysTick_Handler+0x1b4>)
 8003524:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003528:	601a      	str	r2, [r3, #0]

	TIM3->CCR1=nowe_PWM_L;
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <SysTick_Handler+0x1ac>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4b17      	ldr	r3, [pc, #92]	; (800358c <SysTick_Handler+0x1b8>)
 8003530:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=nowe_PWM_P;
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <SysTick_Handler+0x1b4>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b15      	ldr	r3, [pc, #84]	; (800358c <SysTick_Handler+0x1b8>)
 8003538:	639a      	str	r2, [r3, #56]	; 0x38

	TIM1->CNT=0;
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <SysTick_Handler+0x180>)
 800353c:	2200      	movs	r2, #0
 800353e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT=0;
 8003540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003544:	2200      	movs	r2, #0
 8003546:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003548:	f7fd f812 	bl	8000570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800354c:	bf00      	nop
 800354e:	bd80      	pop	{r7, pc}
 8003550:	2000003c 	.word	0x2000003c
 8003554:	40010000 	.word	0x40010000
 8003558:	20000038 	.word	0x20000038
 800355c:	200000ec 	.word	0x200000ec
 8003560:	200000f0 	.word	0x200000f0
 8003564:	20000108 	.word	0x20000108
 8003568:	2000010c 	.word	0x2000010c
 800356c:	200000f4 	.word	0x200000f4
 8003570:	20000114 	.word	0x20000114
 8003574:	20000008 	.word	0x20000008
 8003578:	2000011c 	.word	0x2000011c
 800357c:	2000000c 	.word	0x2000000c
 8003580:	20000030 	.word	0x20000030
 8003584:	20000110 	.word	0x20000110
 8003588:	20000034 	.word	0x20000034
 800358c:	40000400 	.word	0x40000400

08003590 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <DMA2_Stream0_IRQHandler+0x10>)
 8003596:	f7fd fc2d 	bl	8000df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	2000008c 	.word	0x2000008c

080035a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035a8:	4b08      	ldr	r3, [pc, #32]	; (80035cc <SystemInit+0x28>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	4a07      	ldr	r2, [pc, #28]	; (80035cc <SystemInit+0x28>)
 80035b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <SystemInit+0x28>)
 80035ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035be:	609a      	str	r2, [r3, #8]
#endif
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08c      	sub	sp, #48	; 0x30
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80035d6:	f107 030c 	add.w	r3, r7, #12
 80035da:	2224      	movs	r2, #36	; 0x24
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fa2a 	bl	8003a38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035e4:	1d3b      	adds	r3, r7, #4
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035ec:	4b22      	ldr	r3, [pc, #136]	; (8003678 <MX_TIM1_Init+0xa8>)
 80035ee:	4a23      	ldr	r2, [pc, #140]	; (800367c <MX_TIM1_Init+0xac>)
 80035f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80035f2:	4b21      	ldr	r3, [pc, #132]	; (8003678 <MX_TIM1_Init+0xa8>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035f8:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <MX_TIM1_Init+0xa8>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9728;
 80035fe:	4b1e      	ldr	r3, [pc, #120]	; (8003678 <MX_TIM1_Init+0xa8>)
 8003600:	f44f 5218 	mov.w	r2, #9728	; 0x2600
 8003604:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003606:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <MX_TIM1_Init+0xa8>)
 8003608:	2200      	movs	r2, #0
 800360a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800360c:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <MX_TIM1_Init+0xa8>)
 800360e:	2200      	movs	r2, #0
 8003610:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003612:	4b19      	ldr	r3, [pc, #100]	; (8003678 <MX_TIM1_Init+0xa8>)
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003618:	2303      	movs	r3, #3
 800361a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003620:	2301      	movs	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8003628:	230f      	movs	r3, #15
 800362a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800362c:	2300      	movs	r3, #0
 800362e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003630:	2301      	movs	r3, #1
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003634:	2300      	movs	r3, #0
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8003638:	230f      	movs	r3, #15
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800363c:	f107 030c 	add.w	r3, r7, #12
 8003640:	4619      	mov	r1, r3
 8003642:	480d      	ldr	r0, [pc, #52]	; (8003678 <MX_TIM1_Init+0xa8>)
 8003644:	f7fe fcdc 	bl	8002000 <HAL_TIM_Encoder_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800364e:	f7ff fe69 	bl	8003324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003656:	2300      	movs	r3, #0
 8003658:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	4619      	mov	r1, r3
 800365e:	4806      	ldr	r0, [pc, #24]	; (8003678 <MX_TIM1_Init+0xa8>)
 8003660:	f7ff f916 	bl	8002890 <HAL_TIMEx_MasterConfigSynchronization>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800366a:	f7ff fe5b 	bl	8003324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800366e:	bf00      	nop
 8003670:	3730      	adds	r7, #48	; 0x30
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000168 	.word	0x20000168
 800367c:	40010000 	.word	0x40010000

08003680 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08c      	sub	sp, #48	; 0x30
 8003684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003686:	f107 030c 	add.w	r3, r7, #12
 800368a:	2224      	movs	r2, #36	; 0x24
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f9d2 	bl	8003a38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003694:	1d3b      	adds	r3, r7, #4
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800369c:	4b21      	ldr	r3, [pc, #132]	; (8003724 <MX_TIM2_Init+0xa4>)
 800369e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80036a4:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <MX_TIM2_Init+0xa4>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036aa:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <MX_TIM2_Init+0xa4>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9728;
 80036b0:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <MX_TIM2_Init+0xa4>)
 80036b2:	f44f 5218 	mov.w	r2, #9728	; 0x2600
 80036b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036b8:	4b1a      	ldr	r3, [pc, #104]	; (8003724 <MX_TIM2_Init+0xa4>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036be:	4b19      	ldr	r3, [pc, #100]	; (8003724 <MX_TIM2_Init+0xa4>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80036c4:	2303      	movs	r3, #3
 80036c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036c8:	2300      	movs	r3, #0
 80036ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036cc:	2301      	movs	r3, #1
 80036ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80036d4:	230f      	movs	r3, #15
 80036d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036d8:	2300      	movs	r3, #0
 80036da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036dc:	2301      	movs	r3, #1
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80036e4:	230f      	movs	r3, #15
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80036e8:	f107 030c 	add.w	r3, r7, #12
 80036ec:	4619      	mov	r1, r3
 80036ee:	480d      	ldr	r0, [pc, #52]	; (8003724 <MX_TIM2_Init+0xa4>)
 80036f0:	f7fe fc86 	bl	8002000 <HAL_TIM_Encoder_Init>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80036fa:	f7ff fe13 	bl	8003324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	4619      	mov	r1, r3
 800370a:	4806      	ldr	r0, [pc, #24]	; (8003724 <MX_TIM2_Init+0xa4>)
 800370c:	f7ff f8c0 	bl	8002890 <HAL_TIMEx_MasterConfigSynchronization>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003716:	f7ff fe05 	bl	8003324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800371a:	bf00      	nop
 800371c:	3730      	adds	r7, #48	; 0x30
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	200001b0 	.word	0x200001b0

08003728 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	; 0x28
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800372e:	f107 0320 	add.w	r3, r7, #32
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	609a      	str	r2, [r3, #8]
 8003742:	60da      	str	r2, [r3, #12]
 8003744:	611a      	str	r2, [r3, #16]
 8003746:	615a      	str	r2, [r3, #20]
 8003748:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800374a:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <MX_TIM3_Init+0xc0>)
 800374c:	4a27      	ldr	r2, [pc, #156]	; (80037ec <MX_TIM3_Init+0xc4>)
 800374e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003750:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <MX_TIM3_Init+0xc0>)
 8003752:	2200      	movs	r2, #0
 8003754:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003756:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <MX_TIM3_Init+0xc0>)
 8003758:	2200      	movs	r2, #0
 800375a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5249;
 800375c:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <MX_TIM3_Init+0xc0>)
 800375e:	f241 4281 	movw	r2, #5249	; 0x1481
 8003762:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003764:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <MX_TIM3_Init+0xc0>)
 8003766:	2200      	movs	r2, #0
 8003768:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800376a:	4b1f      	ldr	r3, [pc, #124]	; (80037e8 <MX_TIM3_Init+0xc0>)
 800376c:	2200      	movs	r2, #0
 800376e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003770:	481d      	ldr	r0, [pc, #116]	; (80037e8 <MX_TIM3_Init+0xc0>)
 8003772:	f7fe fb45 	bl	8001e00 <HAL_TIM_PWM_Init>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800377c:	f7ff fdd2 	bl	8003324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003780:	2300      	movs	r3, #0
 8003782:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003784:	2300      	movs	r3, #0
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003788:	f107 0320 	add.w	r3, r7, #32
 800378c:	4619      	mov	r1, r3
 800378e:	4816      	ldr	r0, [pc, #88]	; (80037e8 <MX_TIM3_Init+0xc0>)
 8003790:	f7ff f87e 	bl	8002890 <HAL_TIMEx_MasterConfigSynchronization>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800379a:	f7ff fdc3 	bl	8003324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800379e:	2360      	movs	r3, #96	; 0x60
 80037a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037ae:	1d3b      	adds	r3, r7, #4
 80037b0:	2200      	movs	r2, #0
 80037b2:	4619      	mov	r1, r3
 80037b4:	480c      	ldr	r0, [pc, #48]	; (80037e8 <MX_TIM3_Init+0xc0>)
 80037b6:	f7fe fd77 	bl	80022a8 <HAL_TIM_PWM_ConfigChannel>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80037c0:	f7ff fdb0 	bl	8003324 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037c4:	1d3b      	adds	r3, r7, #4
 80037c6:	2204      	movs	r2, #4
 80037c8:	4619      	mov	r1, r3
 80037ca:	4807      	ldr	r0, [pc, #28]	; (80037e8 <MX_TIM3_Init+0xc0>)
 80037cc:	f7fe fd6c 	bl	80022a8 <HAL_TIM_PWM_ConfigChannel>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80037d6:	f7ff fda5 	bl	8003324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80037da:	4803      	ldr	r0, [pc, #12]	; (80037e8 <MX_TIM3_Init+0xc0>)
 80037dc:	f000 f8a4 	bl	8003928 <HAL_TIM_MspPostInit>

}
 80037e0:	bf00      	nop
 80037e2:	3728      	adds	r7, #40	; 0x28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20000120 	.word	0x20000120
 80037ec:	40000400 	.word	0x40000400

080037f0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08c      	sub	sp, #48	; 0x30
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f8:	f107 031c 	add.w	r3, r7, #28
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a32      	ldr	r2, [pc, #200]	; (80038d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d12d      	bne.n	800386e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	4b31      	ldr	r3, [pc, #196]	; (80038dc <HAL_TIM_Encoder_MspInit+0xec>)
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	4a30      	ldr	r2, [pc, #192]	; (80038dc <HAL_TIM_Encoder_MspInit+0xec>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6453      	str	r3, [r2, #68]	; 0x44
 8003822:	4b2e      	ldr	r3, [pc, #184]	; (80038dc <HAL_TIM_Encoder_MspInit+0xec>)
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	4b2a      	ldr	r3, [pc, #168]	; (80038dc <HAL_TIM_Encoder_MspInit+0xec>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	4a29      	ldr	r2, [pc, #164]	; (80038dc <HAL_TIM_Encoder_MspInit+0xec>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6313      	str	r3, [r2, #48]	; 0x30
 800383e:	4b27      	ldr	r3, [pc, #156]	; (80038dc <HAL_TIM_Encoder_MspInit+0xec>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 800384a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800384e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003850:	2302      	movs	r3, #2
 8003852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003854:	2300      	movs	r3, #0
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003858:	2300      	movs	r3, #0
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800385c:	2301      	movs	r3, #1
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003860:	f107 031c 	add.w	r3, r7, #28
 8003864:	4619      	mov	r1, r3
 8003866:	481e      	ldr	r0, [pc, #120]	; (80038e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003868:	f7fd fd00 	bl	800126c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800386c:	e030      	b.n	80038d0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM2)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003876:	d12b      	bne.n	80038d0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	4b17      	ldr	r3, [pc, #92]	; (80038dc <HAL_TIM_Encoder_MspInit+0xec>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	4a16      	ldr	r2, [pc, #88]	; (80038dc <HAL_TIM_Encoder_MspInit+0xec>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6413      	str	r3, [r2, #64]	; 0x40
 8003888:	4b14      	ldr	r3, [pc, #80]	; (80038dc <HAL_TIM_Encoder_MspInit+0xec>)
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	4b10      	ldr	r3, [pc, #64]	; (80038dc <HAL_TIM_Encoder_MspInit+0xec>)
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	4a0f      	ldr	r2, [pc, #60]	; (80038dc <HAL_TIM_Encoder_MspInit+0xec>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6313      	str	r3, [r2, #48]	; 0x30
 80038a4:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <HAL_TIM_Encoder_MspInit+0xec>)
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 80038b0:	2303      	movs	r3, #3
 80038b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b4:	2302      	movs	r3, #2
 80038b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038bc:	2300      	movs	r3, #0
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038c0:	2301      	movs	r3, #1
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c4:	f107 031c 	add.w	r3, r7, #28
 80038c8:	4619      	mov	r1, r3
 80038ca:	4805      	ldr	r0, [pc, #20]	; (80038e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 80038cc:	f7fd fcce 	bl	800126c <HAL_GPIO_Init>
}
 80038d0:	bf00      	nop
 80038d2:	3730      	adds	r7, #48	; 0x30
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40010000 	.word	0x40010000
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40020000 	.word	0x40020000

080038e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0b      	ldr	r2, [pc, #44]	; (8003920 <HAL_TIM_PWM_MspInit+0x3c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d10d      	bne.n	8003912 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <HAL_TIM_PWM_MspInit+0x40>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	4a09      	ldr	r2, [pc, #36]	; (8003924 <HAL_TIM_PWM_MspInit+0x40>)
 8003900:	f043 0302 	orr.w	r3, r3, #2
 8003904:	6413      	str	r3, [r2, #64]	; 0x40
 8003906:	4b07      	ldr	r3, [pc, #28]	; (8003924 <HAL_TIM_PWM_MspInit+0x40>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40000400 	.word	0x40000400
 8003924:	40023800 	.word	0x40023800

08003928 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	f107 030c 	add.w	r3, r7, #12
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a12      	ldr	r2, [pc, #72]	; (8003990 <HAL_TIM_MspPostInit+0x68>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d11d      	bne.n	8003986 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_TIM_MspPostInit+0x6c>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4a10      	ldr	r2, [pc, #64]	; (8003994 <HAL_TIM_MspPostInit+0x6c>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <HAL_TIM_MspPostInit+0x6c>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8003966:	23c0      	movs	r3, #192	; 0xc0
 8003968:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396a:	2302      	movs	r3, #2
 800396c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003972:	2300      	movs	r3, #0
 8003974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003976:	2302      	movs	r3, #2
 8003978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800397a:	f107 030c 	add.w	r3, r7, #12
 800397e:	4619      	mov	r1, r3
 8003980:	4805      	ldr	r0, [pc, #20]	; (8003998 <HAL_TIM_MspPostInit+0x70>)
 8003982:	f7fd fc73 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003986:	bf00      	nop
 8003988:	3720      	adds	r7, #32
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40000400 	.word	0x40000400
 8003994:	40023800 	.word	0x40023800
 8003998:	40020000 	.word	0x40020000

0800399c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800399c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80039a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80039a2:	e003      	b.n	80039ac <LoopCopyDataInit>

080039a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80039a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80039a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80039aa:	3104      	adds	r1, #4

080039ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80039ac:	480b      	ldr	r0, [pc, #44]	; (80039dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80039b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80039b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80039b4:	d3f6      	bcc.n	80039a4 <CopyDataInit>
  ldr  r2, =_sbss
 80039b6:	4a0b      	ldr	r2, [pc, #44]	; (80039e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80039b8:	e002      	b.n	80039c0 <LoopFillZerobss>

080039ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80039ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80039bc:	f842 3b04 	str.w	r3, [r2], #4

080039c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80039c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80039c4:	d3f9      	bcc.n	80039ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80039c6:	f7ff fded 	bl	80035a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ca:	f000 f811 	bl	80039f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039ce:	f7ff f953 	bl	8002c78 <main>
  bx  lr    
 80039d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039d4:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80039d8:	08003a88 	.word	0x08003a88
  ldr  r0, =_sdata
 80039dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80039e0:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80039e4:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80039e8:	200001f8 	.word	0x200001f8

080039ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039ec:	e7fe      	b.n	80039ec <ADC_IRQHandler>
	...

080039f0 <__libc_init_array>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	4d0d      	ldr	r5, [pc, #52]	; (8003a28 <__libc_init_array+0x38>)
 80039f4:	4c0d      	ldr	r4, [pc, #52]	; (8003a2c <__libc_init_array+0x3c>)
 80039f6:	1b64      	subs	r4, r4, r5
 80039f8:	10a4      	asrs	r4, r4, #2
 80039fa:	2600      	movs	r6, #0
 80039fc:	42a6      	cmp	r6, r4
 80039fe:	d109      	bne.n	8003a14 <__libc_init_array+0x24>
 8003a00:	4d0b      	ldr	r5, [pc, #44]	; (8003a30 <__libc_init_array+0x40>)
 8003a02:	4c0c      	ldr	r4, [pc, #48]	; (8003a34 <__libc_init_array+0x44>)
 8003a04:	f000 f820 	bl	8003a48 <_init>
 8003a08:	1b64      	subs	r4, r4, r5
 8003a0a:	10a4      	asrs	r4, r4, #2
 8003a0c:	2600      	movs	r6, #0
 8003a0e:	42a6      	cmp	r6, r4
 8003a10:	d105      	bne.n	8003a1e <__libc_init_array+0x2e>
 8003a12:	bd70      	pop	{r4, r5, r6, pc}
 8003a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a18:	4798      	blx	r3
 8003a1a:	3601      	adds	r6, #1
 8003a1c:	e7ee      	b.n	80039fc <__libc_init_array+0xc>
 8003a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a22:	4798      	blx	r3
 8003a24:	3601      	adds	r6, #1
 8003a26:	e7f2      	b.n	8003a0e <__libc_init_array+0x1e>
 8003a28:	08003a80 	.word	0x08003a80
 8003a2c:	08003a80 	.word	0x08003a80
 8003a30:	08003a80 	.word	0x08003a80
 8003a34:	08003a84 	.word	0x08003a84

08003a38 <memset>:
 8003a38:	4402      	add	r2, r0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d100      	bne.n	8003a42 <memset+0xa>
 8003a40:	4770      	bx	lr
 8003a42:	f803 1b01 	strb.w	r1, [r3], #1
 8003a46:	e7f9      	b.n	8003a3c <memset+0x4>

08003a48 <_init>:
 8003a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4a:	bf00      	nop
 8003a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4e:	bc08      	pop	{r3}
 8003a50:	469e      	mov	lr, r3
 8003a52:	4770      	bx	lr

08003a54 <_fini>:
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	bf00      	nop
 8003a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5a:	bc08      	pop	{r3}
 8003a5c:	469e      	mov	lr, r3
 8003a5e:	4770      	bx	lr
